"""
G4 invariants 

"""
import cmath
import math
import pandas
import os
import sys
import numpy as np
import scipy.io
from matplotlib import pyplot as pot
import matplotlib.pyplot as plt
import matplotlib as mpl
from mpl_toolkits.mplot3d import Axes3D
from sklearn.neighbors import KNeighborsClassifier
from sklearn.cross_validation import train_test_split
from sklearn.cross_validation import cross_val_score
import time
from sklearn.metrics import confusion_matrix
import nrrd
from sklearn.ensemble import RandomForestClassifier
from sklearn.cross_validation import train_test_split
from sklearn.cross_validation import cross_val_score
from sklearn.neighbors import KNeighborsClassifier
from activation_functions import sigmoid_function, tanh_function, linear_function, LReLU_function, ReLU_function, elliot_function, symmetric_elliot_function, softmax_function
from cost_functions import sum_squared_error
from learning_algorithms import backpropagation, scaled_conjugate_gradient, scipyoptimize, resilient_backpropagation
from neuralnet import NeuralNet
from tools import Instance

############################################################

def sum(V):
    res=0
    for i in range(3):
        res+=V[i]
    return res

def prod(V):
    res=1
    for i in range(3):
        res*=V[i]
    return res

def dotprod(V1,V2,W=None):
    res=0
    if W==None:
        for i in range(3):
            res+=V1[i]*V2[i]
    else:
        for i in range(3):
            res+=W[i]*V1[i]*V2[i]

    return res

def selfprod(V):
    res = V[0]*V[2]
    i=0
    j=1
    while (j<=2):
        res += V[i]*V[j]
        i=j
        j=j+1
    return res;

def norm2(V):
    return dotprod(V,V)


def norm3(V):
    res = 0
    for i in range(3):
        res += V[i]*V[i]*V[i]
    return res;


def left(V):
    res=[0,0,0]
    res[2] = V[0]
    for i in range(2):
        res[i] += V[i+1]
    return res


def right(V):
    res=[0,0,0]
    res[0] = V[2]
    for i in range(2):
        res[i+1] += V[i]
    return res;


class Vector3D(object):
    def __init__(self, x,y,z):
        self.x = x
        self.y = y
        self.z = z

    # overload []
    def __getitem__(self, index):
        data = [self.x,self.y,self.z]
        return data[index]

    # overload set []
    def __setitem__(self, key, item):
        if (key == 0):
            self.x = item
        elif (key == 1):
            self.y = item
        elif (key == 2):
            self.z = item

#Rotatetensosr54 function
def RotateTensor4(T4,R):
    assert( len(T4)==15);

    #tensor coefficients
    c400 = T4[ 1-1]; # 1)x^4
    c040 = T4[ 5-1]; # 5)y^4
    c004 = T4[15-1]; #15)z^4
    c031 = T4[ 9-1]; # 9)y^3*z
    c103 = T4[13-1]; #13)x*z^3
    c310 = T4[ 2-1]; # 2)x^3*y
    c022 = T4[12-1]; #12)y^2*z^2
    c202 = T4[10-1]; #10)x^2*z^2
    c220 = T4[ 3-1]; # 3)x^2*y^2
    c211 = T4[ 7-1]; # 7)x^2*y*z
    c121 = T4[ 8-1]; # 8)x*y^2*z
    c112 = T4[11-1]; #11)x*y*z^2
    c013 = T4[14-1]; #14)y*z^3
    c301 = T4[ 6-1]; # 6)x^3*z
    c130 = T4[ 4-1]; # 4)x*y^3

    #rotation matrix
    r11 = R[0][0]; r12 = R[0][1]; r13 = R[0][2];
    r21 = R[1][0]; r22 = R[1][1]; r23 = R[1][2];
    r31 = R[2][0]; r32 = R[2][1]; r33 = R[2][2];

    #rotate tensor
    C400 = c004*pow(r31,4)+(4*c013*r21+4*c103*r11)*pow(r31,3)+(6*c022*pow(r21,2)+12*c112*r11*r21+6*c202*pow(r11,2))*pow(r31,2)+(4*c031*pow(r21,3)+12*c121*r11*pow(r21,2)+12*c211*pow(r11,2)*r21+4*c301*pow(r11,3))*r31+c040*pow(r21,4)+4*c130*r11*pow(r21,3)+6*c220*pow(r11,2)*pow(r21,2)+4*c310*pow(r11,3)*r21+c400*pow(r11,4); #,pow(x,4)
    C310 = (4*c004*pow(r31,3)+(12*c013*r21+12*c103*r11)*pow(r31,2)+(12*c022*pow(r21,2)+24*c112*r11*r21+12*c202*pow(r11,2))*r31+4*c031*pow(r21,3)+12*c121*r11*pow(r21,2)+12*c211*pow(r11,2)*r21+4*c301*pow(r11,3))*r32+(4*c013*r22+4*c103*r12)*pow(r31,3)+((12*c022*r21+12*c112*r11)*r22+12*c112*r12*r21+12*c202*r11*r12)*pow(r31,2)+((12*c031*pow(r21,2)+24*c121*r11*r21+12*c211*pow(r11,2))*r22+12*c121*r12*pow(r21,2)+24*c211*r11*r12*r21+12*c301*pow(r11,2)*r12)*r31+(4*c040*pow(r21,3)+12*c130*r11*pow(r21,2)+12*c220*pow(r11,2)*r21+4*c310*pow(r11,3))*r22+4*c130*r12*pow(r21,3)+12*c220*r11*r12*pow(r21,2)+12*c310*pow(r11,2)*r12*r21+4*c400*pow(r11,3)*r12;#,pow(x,3)*y
    C220 = (6*c004*pow(r31,2)+(12*c013*r21+12*c103*r11)*r31+6*c022*pow(r21,2)+12*c112*r11*r21+6*c202*pow(r11,2))*pow(r32,2)+((12*c013*r22+12*c103*r12)*pow(r31,2)+((24*c022*r21+24*c112*r11)*r22+24*c112*r12*r21+24*c202*r11*r12)*r31+(12*c031*pow(r21,2)+24*c121*r11*r21+12*c211*pow(r11,2))*r22+12*c121*r12*pow(r21,2)+24*c211*r11*r12*r21+12*c301*pow(r11,2)*r12)*r32+(6*c022*pow(r22,2)+12*c112*r12*r22+6*c202*pow(r12,2))*pow(r31,2)+((12*c031*r21+12*c121*r11)*pow(r22,2)+(24*c121*r12*r21+24*c211*r11*r12)*r22+12*c211*pow(r12,2)*r21+12*c301*r11*pow(r12,2))*r31+(6*c040*pow(r21,2)+12*c130*r11*r21+6*c220*pow(r11,2))*pow(r22,2)+(12*c130*r12*pow(r21,2)+24*c220*r11*r12*r21+12*c310*pow(r11,2)*r12)*r22+6*c220*pow(r12,2)*pow(r21,2)+12*c310*r11*pow(r12,2)*r21+6*c400*pow(r11,2)*pow(r12,2);#pow(x,2)*pow(y,2)
    C130 = (4*c004*r31+4*c013*r21+4*c103*r11)*pow(r32,3)+((12*c013*r22+12*c103*r12)*r31+(12*c022*r21+12*c112*r11)*r22+12*c112*r12*r21+12*c202*r11*r12)*pow(r32,2)+((12*c022*pow(r22,2)+24*c112*r12*r22+12*c202*pow(r12,2))*r31+(12*c031*r21+12*c121*r11)*pow(r22,2)+(24*c121*r12*r21+24*c211*r11*r12)*r22+12*c211*pow(r12,2)*r21+12*c301*r11*pow(r12,2))*r32+(4*c031*pow(r22,3)+12*c121*r12*pow(r22,2)+12*c211*pow(r12,2)*r22+4*c301*pow(r12,3))*r31+(4*c040*r21+4*c130*r11)*pow(r22,3)+(12*c130*r12*r21+12*c220*r11*r12)*pow(r22,2)+(12*c220*pow(r12,2)*r21+12*c310*r11*pow(r12,2))*r22+4*c310*pow(r12,3)*r21+4*c400*r11*pow(r12,3);#x*pow(y,3)
    C040 = c004*pow(r32,4)+(4*c013*r22+4*c103*r12)*pow(r32,3)+(6*c022*pow(r22,2)+12*c112*r12*r22+6*c202*pow(r12,2))*pow(r32,2)+(4*c031*pow(r22,3)+12*c121*r12*pow(r22,2)+12*c211*pow(r12,2)*r22+4*c301*pow(r12,3))*r32+c040*pow(r22,4)+4*c130*r12*pow(r22,3)+6*c220*pow(r12,2)*pow(r22,2)+4*c310*pow(r12,3)*r22+c400*pow(r12,4);#],pow(y,4)
    C301 = (4*c004*pow(r31,3)+(12*c013*r21+12*c103*r11)*pow(r31,2)+(12*c022*pow(r21,2)+24*c112*r11*r21+12*c202*pow(r11,2))*r31+4*c031*pow(r21,3)+12*c121*r11*pow(r21,2)+12*c211*pow(r11,2)*r21+4*c301*pow(r11,3))*r33+(4*c013*r23+4*c103*r13)*pow(r31,3)+((12*c022*r21+12*c112*r11)*r23+12*c112*r13*r21+12*c202*r11*r13)*pow(r31,2)+((12*c031*pow(r21,2)+24*c121*r11*r21+12*c211*pow(r11,2))*r23+12*c121*r13*pow(r21,2)+24*c211*r11*r13*r21+12*c301*pow(r11,2)*r13)*r31+(4*c040*pow(r21,3)+12*c130*r11*pow(r21,2)+12*c220*pow(r11,2)*r21+4*c310*pow(r11,3))*r23+4*c130*r13*pow(r21,3)+12*c220*r11*r13*pow(r21,2)+12*c310*pow(r11,2)*r13*r21+4*c400*pow(r11,3)*r13;#],pow(x,3)*z
    C211 = ((12*c004*pow(r31,2)+(24*c013*r21+24*c103*r11)*r31+12*c022*pow(r21,2)+24*c112*r11*r21+12*c202*pow(r11,2))*r32+(12*c013*r22+12*c103*r12)*pow(r31,2)+((24*c022*r21+24*c112*r11)*r22+24*c112*r12*r21+24*c202*r11*r12)*r31+(12*c031*pow(r21,2)+24*c121*r11*r21+12*c211*pow(r11,2))*r22+12*c121*r12*pow(r21,2)+24*c211*r11*r12*r21+12*c301*pow(r11,2)*r12)*r33+((12*c013*r23+12*c103*r13)*pow(r31,2)+((24*c022*r21+24*c112*r11)*r23+24*c112*r13*r21+24*c202*r11*r13)*r31+(12*c031*pow(r21,2)+24*c121*r11*r21+12*c211*pow(r11,2))*r23+12*c121*r13*pow(r21,2)+24*c211*r11*r13*r21+12*c301*pow(r11,2)*r13)*r32+((12*c022*r22+12*c112*r12)*r23+12*c112*r13*r22+12*c202*r12*r13)*pow(r31,2)+(((24*c031*r21+24*c121*r11)*r22+24*c121*r12*r21+24*c211*r11*r12)*r23+(24*c121*r13*r21+24*c211*r11*r13)*r22+24*c211*r12*r13*r21+24*c301*r11*r12*r13)*r31+((12*c040*pow(r21,2)+24*c130*r11*r21+12*c220*pow(r11,2))*r22+12*c130*r12*pow(r21,2)+24*c220*r11*r12*r21+12*c310*pow(r11,2)*r12)*r23+(12*c130*r13*pow(r21,2)+24*c220*r11*r13*r21+12*c310*pow(r11,2)*r13)*r22+12*c220*r12*r13*pow(r21,2)+24*c310*r11*r12*r13*r21+12*c400*pow(r11,2)*r12*r13;#],pow(x,2)*y*z
    C121 = ((12*c004*r31+12*c013*r21+12*c103*r11)*pow(r32,2)+((24*c013*r22+24*c103*r12)*r31+(24*c022*r21+24*c112*r11)*r22+24*c112*r12*r21+24*c202*r11*r12)*r32+(12*c022*pow(r22,2)+24*c112*r12*r22+12*c202*pow(r12,2))*r31+(12*c031*r21+12*c121*r11)*pow(r22,2)+(24*c121*r12*r21+24*c211*r11*r12)*r22+12*c211*pow(r12,2)*r21+12*c301*r11*pow(r12,2))*r33+((12*c013*r23+12*c103*r13)*r31+(12*c022*r21+12*c112*r11)*r23+12*c112*r13*r21+12*c202*r11*r13)*pow(r32,2)+(((24*c022*r22+24*c112*r12)*r23+24*c112*r13*r22+24*c202*r12*r13)*r31+((24*c031*r21+24*c121*r11)*r22+24*c121*r12*r21+24*c211*r11*r12)*r23+(24*c121*r13*r21+24*c211*r11*r13)*r22+24*c211*r12*r13*r21+24*c301*r11*r12*r13)*r32+((12*c031*pow(r22,2)+24*c121*r12*r22+12*c211*pow(r12,2))*r23+12*c121*r13*pow(r22,2)+24*c211*r12*r13*r22+12*c301*pow(r12,2)*r13)*r31+((12*c040*r21+12*c130*r11)*pow(r22,2)+(24*c130*r12*r21+24*c220*r11*r12)*r22+12*c220*pow(r12,2)*r21+12*c310*r11*pow(r12,2))*r23+(12*c130*r13*r21+12*c220*r11*r13)*pow(r22,2)+(24*c220*r12*r13*r21+24*c310*r11*r12*r13)*r22+12*c310*pow(r12,2)*r13*r21+12*c400*r11*pow(r12,2)*r13;#],x*pow(y,2)*z
    C031 = (4*c004*pow(r32,3)+(12*c013*r22+12*c103*r12)*pow(r32,2)+(12*c022*pow(r22,2)+24*c112*r12*r22+12*c202*pow(r12,2))*r32+4*c031*pow(r22,3)+12*c121*r12*pow(r22,2)+12*c211*pow(r12,2)*r22+4*c301*pow(r12,3))*r33+(4*c013*r23+4*c103*r13)*pow(r32,3)+((12*c022*r22+12*c112*r12)*r23+12*c112*r13*r22+12*c202*r12*r13)*pow(r32,2)+((12*c031*pow(r22,2)+24*c121*r12*r22+12*c211*pow(r12,2))*r23+12*c121*r13*pow(r22,2)+24*c211*r12*r13*r22+12*c301*pow(r12,2)*r13)*r32+(4*c040*pow(r22,3)+12*c130*r12*pow(r22,2)+12*c220*pow(r12,2)*r22+4*c310*pow(r12,3))*r23+4*c130*r13*pow(r22,3)+12*c220*r12*r13*pow(r22,2)+12*c310*pow(r12,2)*r13*r22+4*c400*pow(r12,3)*r13;#],pow(y,3)*z
    C202 = (6*c004*pow(r31,2)+(12*c013*r21+12*c103*r11)*r31+6*c022*pow(r21,2)+12*c112*r11*r21+6*c202*pow(r11,2))*pow(r33,2)+((12*c013*r23+12*c103*r13)*pow(r31,2)+((24*c022*r21+24*c112*r11)*r23+24*c112*r13*r21+24*c202*r11*r13)*r31+(12*c031*pow(r21,2)+24*c121*r11*r21+12*c211*pow(r11,2))*r23+12*c121*r13*pow(r21,2)+24*c211*r11*r13*r21+12*c301*pow(r11,2)*r13)*r33+(6*c022*pow(r23,2)+12*c112*r13*r23+6*c202*pow(r13,2))*pow(r31,2)+((12*c031*r21+12*c121*r11)*pow(r23,2)+(24*c121*r13*r21+24*c211*r11*r13)*r23+12*c211*pow(r13,2)*r21+12*c301*r11*pow(r13,2))*r31+(6*c040*pow(r21,2)+12*c130*r11*r21+6*c220*pow(r11,2))*pow(r23,2)+(12*c130*r13*pow(r21,2)+24*c220*r11*r13*r21+12*c310*pow(r11,2)*r13)*r23+6*c220*pow(r13,2)*pow(r21,2)+12*c310*r11*pow(r13,2)*r21+6*c400*pow(r11,2)*pow(r13,2);#],pow(x,2)*pow(z,2)
    C112 = ((12*c004*r31+12*c013*r21+12*c103*r11)*r32+(12*c013*r22+12*c103*r12)*r31+(12*c022*r21+12*c112*r11)*r22+12*c112*r12*r21+12*c202*r11*r12)*pow(r33,2)+(((24*c013*r23+24*c103*r13)*r31+(24*c022*r21+24*c112*r11)*r23+24*c112*r13*r21+24*c202*r11*r13)*r32+((24*c022*r22+24*c112*r12)*r23+24*c112*r13*r22+24*c202*r12*r13)*r31+((24*c031*r21+24*c121*r11)*r22+24*c121*r12*r21+24*c211*r11*r12)*r23+(24*c121*r13*r21+24*c211*r11*r13)*r22+24*c211*r12*r13*r21+24*c301*r11*r12*r13)*r33+((12*c022*pow(r23,2)+24*c112*r13*r23+12*c202*pow(r13,2))*r31+(12*c031*r21+12*c121*r11)*pow(r23,2)+(24*c121*r13*r21+24*c211*r11*r13)*r23+12*c211*pow(r13,2)*r21+12*c301*r11*pow(r13,2))*r32+((12*c031*r22+12*c121*r12)*pow(r23,2)+(24*c121*r13*r22+24*c211*r12*r13)*r23+12*c211*pow(r13,2)*r22+12*c301*r12*pow(r13,2))*r31+((12*c040*r21+12*c130*r11)*r22+12*c130*r12*r21+12*c220*r11*r12)*pow(r23,2)+((24*c130*r13*r21+24*c220*r11*r13)*r22+24*c220*r12*r13*r21+24*c310*r11*r12*r13)*r23+(12*c220*pow(r13,2)*r21+12*c310*r11*pow(r13,2))*r22+12*c310*r12*pow(r13,2)*r21+12*c400*r11*r12*pow(r13,2);#],x*y*pow(z,2)
    C022 = (6*c004*pow(r32,2)+(12*c013*r22+12*c103*r12)*r32+6*c022*pow(r22,2)+12*c112*r12*r22+6*c202*pow(r12,2))*pow(r33,2)+((12*c013*r23+12*c103*r13)*pow(r32,2)+((24*c022*r22+24*c112*r12)*r23+24*c112*r13*r22+24*c202*r12*r13)*r32+(12*c031*pow(r22,2)+24*c121*r12*r22+12*c211*pow(r12,2))*r23+12*c121*r13*pow(r22,2)+24*c211*r12*r13*r22+12*c301*pow(r12,2)*r13)*r33+(6*c022*pow(r23,2)+12*c112*r13*r23+6*c202*pow(r13,2))*pow(r32,2)+((12*c031*r22+12*c121*r12)*pow(r23,2)+(24*c121*r13*r22+24*c211*r12*r13)*r23+12*c211*pow(r13,2)*r22+12*c301*r12*pow(r13,2))*r32+(6*c040*pow(r22,2)+12*c130*r12*r22+6*c220*pow(r12,2))*pow(r23,2)+(12*c130*r13*pow(r22,2)+24*c220*r12*r13*r22+12*c310*pow(r12,2)*r13)*r23+6*c220*pow(r13,2)*pow(r22,2)+12*c310*r12*pow(r13,2)*r22+6*c400*pow(r12,2)*pow(r13,2);#],pow(y,2)*pow(z,2)
    C103 = (4*c004*r31+4*c013*r21+4*c103*r11)*pow(r33,3)+((12*c013*r23+12*c103*r13)*r31+(12*c022*r21+12*c112*r11)*r23+12*c112*r13*r21+12*c202*r11*r13)*pow(r33,2)+((12*c022*pow(r23,2)+24*c112*r13*r23+12*c202*pow(r13,2))*r31+(12*c031*r21+12*c121*r11)*pow(r23,2)+(24*c121*r13*r21+24*c211*r11*r13)*r23+12*c211*pow(r13,2)*r21+12*c301*r11*pow(r13,2))*r33+(4*c031*pow(r23,3)+12*c121*r13*pow(r23,2)+12*c211*pow(r13,2)*r23+4*c301*pow(r13,3))*r31+(4*c040*r21+4*c130*r11)*pow(r23,3)+(12*c130*r13*r21+12*c220*r11*r13)*pow(r23,2)+(12*c220*pow(r13,2)*r21+12*c310*r11*pow(r13,2))*r23+4*c310*pow(r13,3)*r21+4*c400*r11*pow(r13,3);#],x*pow(z,3)
    C013 = (4*c004*r32+4*c013*r22+4*c103*r12)*pow(r33,3)+((12*c013*r23+12*c103*r13)*r32+(12*c022*r22+12*c112*r12)*r23+12*c112*r13*r22+12*c202*r12*r13)*pow(r33,2)+((12*c022*pow(r23,2)+24*c112*r13*r23+12*c202*pow(r13,2))*r32+(12*c031*r22+12*c121*r12)*pow(r23,2)+(24*c121*r13*r22+24*c211*r12*r13)*r23+12*c211*pow(r13,2)*r22+12*c301*r12*pow(r13,2))*r33+(4*c031*pow(r23,3)+12*c121*r13*pow(r23,2)+12*c211*pow(r13,2)*r23+4*c301*pow(r13,3))*r32+(4*c040*r22+4*c130*r12)*pow(r23,3)+(12*c130*r13*r22+12*c220*r12*r13)*pow(r23,2)+(12*c220*pow(r13,2)*r22+12*c310*r12*pow(r13,2))*r23+4*c310*pow(r13,3)*r22+4*c400*r12*pow(r13,3);#],y*pow(z,3)
    C004 = c004*pow(r33,4)+(4*c013*r23+4*c103*r13)*pow(r33,3)+(6*c022*pow(r23,2)+12*c112*r13*r23+6*c202*pow(r13,2))*pow(r33,2)+(4*c031*pow(r23,3)+12*c121*r13*pow(r23,2)+12*c211*pow(r13,2)*r23+4*c301*pow(r13,3))*r33+c040*pow(r23,4)+4*c130*r13*pow(r23,3)+6*c220*pow(r13,2)*pow(r23,2)+4*c310*pow(r13,3)*r23+c400*pow(r13,4);#],pow(z,4)
    rotT4=[]
    rotT4.append(C400); #1)x^4
    rotT4.append(C310/4.); #2)x^3*y
    rotT4.append(C220/6.); #3)x^2*y^2
    rotT4.append(C130/4.); #4)x*y^3
    rotT4.append(C040); #5)y^4
    rotT4.append(C301/4.); #6)x^3*z
    rotT4.append(C211/12.); #7)x^2*y*z
    rotT4.append(C121/12.); #8)x*y^2*z
    rotT4.append(C031/4.); #9)y^3*z
    rotT4.append(C202/6.); #10)x^2*z^2
    rotT4.append(C112/12.); #11)x*y*z^2
    rotT4.append(C022/6.); #12)y^2*z^2
    rotT4.append(C103/4.); #13)x*z^3
    rotT4.append(C013/4.); #14)y*z^3
    rotT4.append(C004); #15)z^4
    return rotT4;

def GDT4General12(gdt4):
    assert(len(gdt4)==15)
    c400 = gdt4[ 1-1]; # 1)x^4
    c040 = gdt4[ 5-1]; # 5)y^4
    c004 = gdt4[15-1]; #15)z^4
    c031 = gdt4[ 9-1]; # 9)y^3*z
    c103 = gdt4[13-1]; #13)x*z^3
    c310 = gdt4[ 2-1]; # 2)x^3*y
    c022 = gdt4[12-1]; #12)y^2*z^2
    c202 = gdt4[10-1]; #10)x^2*z^2
    c220 = gdt4[ 3-1]; # 3)x^2*y^2
    c211 = gdt4[ 7-1]; # 7)x^2*y*z
    c121 = gdt4[ 8-1]; # 8)x*y^2*z
    c112 = gdt4[11-1]; #11)x*y*z^2
    c013 = gdt4[14-1]; #14)y*z^3
    c301 = gdt4[ 6-1]; # 6)x^3*z
    c130 = gdt4[ 4-1]; # 4)x*y^3

    C1=Vector3D(c112,c121,c211);
    C2=Vector3D(c220,c202,c022);
    C3=Vector3D(c130,c301,c013);
    C4=Vector3D(c310,c103,c031);
    C5=Vector3D(c004,c040,c400);

    S2=sum(C2)
    S5=sum(C5)
    Invs=[]
    Invs.append(2*S2+S5)
    Invs[1-1] = 2*S2+S5;
    #Invariants of degree 2.
    C11 = norm2(C1)
    C22 = norm2(C2)
    C33 = norm2(C3)
    C44 = norm2(C4)
    C55 = norm2(C5)
    C13 = dotprod(C1,C3)
    C14 = dotprod(C1,C4)
    C34 = dotprod(C3,C4)
    C25 = dotprod(C2,C5)
    D2 = selfprod(C2)
    D5 = selfprod(C5)
    Invs.append(12*C11+6*C22+4*(C33+C44)+C55)
    Invs.append(4*(C13+C14+C34-C11)-3*C22-2*(C25+D2)-D5)
    #Invariants of degree 3.
    P1 = prod(C1);
    P2 = prod(C2);
    P3 = prod(C3);
    P4 = prod(C4);
    P5 = prod(C5);
    C112 = dotprod(C1,C1,C2);
    C115 = dotprod(C1,C1,C5);
    C123 = dotprod(C1,C2,C3);
    C124 = dotprod(C1,C2,C4);
    C135 = dotprod(C1,C3,C5);
    C145 = dotprod(C1,C4,C5);
    C222 = dotprod(C2,C2,C2);
    C225 = dotprod(C2,C2,C5);
    C233 = dotprod(C2,C3,C3);
    C234 = dotprod(C2,C3,C4);
    C244 = dotprod(C2,C4,C4);
    C335 = dotprod(C3,C3,C5);
    C345 = dotprod(C3,C4,C5);
    C445 = dotprod(C4,C4,C5);
    C555 = dotprod(C5,C5,C5);
    L123 = dotprod(C1,left(C2),C3);
    L124 = dotprod(C1,left(C2),C4);
    L154 = dotprod(C1,left(C5),C4);
    L255 = dotprod(C2,left(C5),C5);
    L324 = dotprod(C3,left(C2),C4);
    L353 = dotprod(C3,left(C5),C3);
    L424 = dotprod(C4,left(C2),C4);
    L454 = dotprod(C4,left(C5),C4);
    R123 = dotprod(C1,right(C2),C3);
    R124 = dotprod(C1,right(C2),C4);
    R153 = dotprod(C1,right(C5),C3);
    R255 = dotprod(C2,right(C5),C5);
    R323 = dotprod(C3,right(C2),C3);
    R324 = dotprod(C3,right(C2),C4);
    R353 = dotprod(C3,right(C5),C3);
    R454 = dotprod(C4,right(C5),C4);
    LR131 = dotprod(left(C1),C3,right(C1));
    LR141 = dotprod(left(C1),C4,right(C1));
    LR252 = dotprod(left(C2),C5,right(C2));
    LR313 = dotprod(left(C3),C1,right(C3));
    LR314 = dotprod(left(C3),C1,right(C4));
    LR343 = dotprod(left(C3),C4,right(C3));
    LR413 = dotprod(left(C4),C1,right(C3));
    LR414 = dotprod(left(C4),C1,right(C4));
    LR434 = dotprod(left(C4),C3,right(C4));
    LR525 = dotprod(left(C5),C2,right(C5));
    T112 = S2*C11-C112;
    T222 = S2*C22-C222;
    T115 = S5*C11-C115;
    T225 = S5*C22-C225;
    Invs.append(12*(P1+L123+R124-C112-LR314)+4*(C345-P3-P4)-6*P2-3*C225-P5)
    Invs.append(48*P1+24*(T112+LR131+LR141+LR413)+12*(L124+C112+C234+C233+C244+R123)+8*C222+6*(P2+L353+C115+R454)+3*T225+C555)
    Invs.append(12*(L124+R123+LR413-LR313-LR414)+6*(P1+P2+L154+L324-L424-C124-C123-C115+R153+R324-R323+LR252-LR314+T112-T222-T115)
    +4*C345-3*C225+2*(P3+P4)-P5)
    Invs.append(36*(L124+R123)+24*(C135+C145+L324+R324-LR414-LR313-LR434-LR343)+18*(P2-T222-T115)+16*(C345-P3-P4)+
    12*C234-9*C225-7*P5-6*(C222-C335-C445+L255+L454+R255+R353-LR525))
    
    #order 4

    Invs.append((c022*pow(c121,2)*c220
    +c202*pow(c211,2)*c220+c022*pow(c112,2)*c202)*360+(pow(c202,2)*pow(c220,2)+pow(c022,2)*pow(c202,2)+pow(c022,2)*
    pow(c220,2))*54+(pow(c121,2)*pow(c220,2)+pow(c022,2)*pow(c121,2)+pow(c112,2)*pow(c202,2)+pow(c211,2)*pow(c220,2)+pow(c022,2)*
    pow(c112,2)+pow(c202,2)*pow(c211,2))*180+(pow(c220,4)+pow(c202,4)+pow(c022,4))*69+(-c103*pow(c211,2)*c301-c103*
    pow(c112,2)*c301-c013*c031*pow(c112,2)-pow(c121,2)*c130*c310-c130*pow(c211,2)*c310-c013*c031*pow(c121,2))*576+(-c103*c121*pow(c211,2)-pow(c112,2)*c121*c301-c112*pow(c121,2)*c310-c013*pow(c121,2)*c211-
    c031*pow(c112,2)*c211-c112*c130*pow(c211,2))*720+(c022*c031*c202*c211+c022*c112*c220*
    c310+c022*c121*c202*c301+c103*c121*c202*c220+c013*c022*c211*c220+c112*c130*
    c202*c220)*504+(-c022*c103*c112*c211-c013*c112*c121*c202-c121*c202*c211*c310-
    c031*c112*c121*c220-c022*c121*c130*c211-c112*c211*c220*c301)*864+(c022*c031*
    c103*c112-c013*pow(c211,3)-c013*c121*c211*c301-c022*c202*pow(c211,2)-c031*pow(c211,3)-pow(c112,2)*
    c202*c220-pow(c121,3)*c301-pow(c112,3)*c310+c013*c022*c121*c130-c022*pow(c121,2)*c202-c022*
    pow(c211,2)*c220-c031*c112*c211*c310-c103*pow(c121,3)-c013*c112*c130*c211+c130*c211*c220
    *c301+c013*c112*c202*c301-c022*pow(c112,2)*c220-pow(c112,3)*c130-pow(c121,2)*c202*c220+c103*
    c202*c211*c310-c031*c103*c121*c211-c103*c112*c121*c310+c031*c121*c220*c310-
    c112*c121*c130*c301)*288+(pow(c013,2)*pow(c301,2)+pow(c031,2)*pow(c103,2)+pow(c103,2)*pow(c310,2)+pow(c031,2)*
    pow(c310,2)+pow(c013,2)*pow(c130,2)+pow(c130,2)*pow(c301,2))*8+(-pow(c013,2)*pow(c031,2)-pow(c130,2)*pow(c310,2)-pow(c103,2)*
    pow(c301,2))*16+(-pow(c013,2)*pow(c121,2)-pow(c031,2)*pow(c112,2)-pow(c103,2)*pow(c211,2)-pow(c121,2)*pow(c310,2)-pow(c112,2)*
    pow(c301,2)-pow(c130,2)*pow(c211,2))*24+(c112*c202*c220*c310+c022*c031*c211*c220+c022*c121*
    c211*c310+c103*c112*c211*c220+c013*c022*c202*c211+c022*c112*c130*c220+c022*
    c112*c211*c301+c013*c112*c211*c310-c121*c301*pow(c310,2)-pow(c022,2)*c103*c121-pow(c022,2)*
    c112*c130-c013*pow(c103,2)*c211-c013*pow(c202,2)*c211+c022*c103*c121*c202+c022*c112*c121
    *c211+c112*c121*c202*c211+c112*c121*c211*c220+c013*c112*c121*c220+c031*c112*
    c121*c202+c121*c202*c220*c301+c121*c130*c202*c211+c103*c112*c121*c130+c031*
    c121*c211*c301-c031*pow(c130,2)*c211-c121*pow(c220,2)*c301-pow(c013,2)*c103*c121-c112*pow(c301,2)*
    c310-pow(c031,2)*c112*c130-c112*pow(c202,2)*c310-c031*c211*pow(c220,2))*432+(pow(c112,2)*pow(c121,2)-
    c004*c022*pow(c112,2)-c040*pow(c121,2)*c220-c202*pow(c211,2)*c400+pow(c121,2)*pow(c211,2)-c022*c040*
    pow(c121,2)-c004*pow(c112,2)*c202+pow(c112,2)*pow(c211,2)-pow(c211,2)*c220*c400)*216+(c013*c040*c103*
    c130+c040*c130*c310*c400+c004*c013*c031*c040+c004*c013*c301*c310+c031*c040*
    c301*c310+c013*c103*c310*c400+c004*c031*c103*c130+c031*c130*c301*c400+c004*
    c103*c301*c400)*80+(c031*c040*c112*c121+c040*c121*c130*c211+c004*c013*c112*
    c121+c004*c103*c112*c211+c112*c211*c301*c400+c121*c211*c310*c400)*192+(c031*
    c103*c130*c202-c004*c013*c103*c112+c004*c103*c121*c220+c004*c103*c211*c310-
    c031*c040*c121*c130+c013*c103*c130*c220+c031*c040*c103*c112+c031*c130*c202*
    c301+c022*c121*c301*c400+c031*c040*c202*c211+c013*c112*c301*c400+c022*c112*
    c310*c400+c013*c022*c301*c310+c031*c121*c310*c400+c040*c112*c130*c202+c004*
    c013*c211*c220-c211*c301*c310*c400+c004*c013*c121*c130+c013*c103*c220*c310+
    c022*c031*c301*c310+c040*c130*c211*c301)*240+(-c112*c121*c301*c310-c031*c112*
    c130*c211+pow(c202,3)*c220+c004*c103*c202*c301+c022*pow(c220,3)+c013*c022*c031*c040+c112
    *c202*c310*c400+c103*c202*c301*c400+c130*c220*c310*c400+c022*pow(c202,3)+c040*c130*
    c220*c310+c202*pow(c220,3)+pow(c022,3)*c202-c013*c103*c121*c211+c031*c040*c211*c220+c121
    *c220*c301*c400+c022*c040*c112*c130+pow(c022,3)*c220+c004*c013*c202*c211+c004*c013*
    c022*c031+c004*c022*c103*c121)*96+(-c004*pow(c202,3)-c004*pow(c022,3)-pow(c022,3)*c040-c040*
    pow(c220,3)+pow(c130,2)*pow(c220,2)+pow(c103,2)*pow(c202,2)-pow(c202,3)*c400+pow(c202,2)*pow(c301,2)+pow(c013,2)*pow(c022,2)+
    pow(c220,2)*pow(c310,2)-pow(c220,3)*c400+pow(c022,2)*pow(c031,2))*60+(pow(c220,2)*pow(c112,2)+pow(c022,2)*pow(c211,2)+pow(c202,2)*pow(c121,2)+c004*c031*c211*c220-c013*c031*c202*c220+c040*c112*c202*c310-c022*
    c202*pow(c220,2)+c004*c220*pow(c310,2)+c220*pow(c301,2)*c400+c202*pow(c310,2)*c400+c004*pow(c103,2)*
    c220+c022*pow(c301,2)*c400+c022*pow(c031,2)*c400+pow(c013,2)*c022*c400-c022*pow(c103,2)*c220-c022*
    c103*c220*c301+c004*c130*c220*c310+c040*c103*c202*c301+c013*c040*c202*c211-
    c022*c130*c202*c310+c022*c103*c121*c400+c022*c112*c130*c400+c004*c121*c220*
    c301+c013*c022*c031*c400-pow(c103,2)*pow(c130,2)-pow(c031,2)*pow(c301,2)-pow(c013,2)*pow(c310,2)+c004*c220*
    pow(c112,2)+c022*c400*pow(c211,2)+c040*c202*pow(c121,2)-c022*pow(c130,2)*c202-c022*c220*pow(c301,2)+
    c004*c022*pow(c103,2)+c040*pow(c130,2)*c202+c022*c040*pow(c130,2)+pow(c031,2)*c040*c220+c004*pow(c013,2)*c220-pow(c031,2)*c202*c220-c022*pow(c202,2)*c220+c040*c202*pow(c301,2)-c022*c202*pow(c310,2)+
    pow(c031,2)*c040*c202+c040*pow(c103,2)*c202+c004*pow(c130,2)*c220+c022*pow(c310,2)*c400-pow(c013,2)*
    c202*c220+c004*pow(c013,2)*c202-pow(c022,2)*c202*c220)*72+(-c004*pow(c103,2)*c202-c004*pow(c013,2)*c022-c220*pow(c310,2)*c400-c202*c211*c301*c310-c013*c103*c112*c202-c211*c220*c301
    *c310-c013*c022*c103*c112-c031*c121*c130*c220-c022*c031*c121*c130-pow(c130,2)*pow(c202,2)-pow(c031,2)*pow(c202,2)+c040*pow(c202,3)-pow(c022,2)*pow(c310,2)+pow(c022,3)*c400-pow(c022,2)*pow(c301,2)-pow(c013,2)*
    pow(c220,2)-pow(c103,2)*pow(c220,2)+c004*pow(c220,3)-c040*pow(c130,2)*c220-c202*pow(c301,2)*c400-c022*pow(c031,2)
    *c040-c031*c130*c211*c310-c121*c130*c301*c310-c013*c031*c103*c121-c013*c031*
    c112*c130-c013*c103*c211*c301-c103*c112*c301*c310)*48+(c022*pow(c121,2)*c400+c040*
    pow(c112,2)*c202+c040*c202*pow(c211,2)+c022*pow(c112,2)*c400+c004*pow(c211,2)*c220+c103*c202*c220*
    c301-c013*c112*c220*c301-c013*c031*pow(c211,2)+c022*pow(c103,2)*c202+c022*c220*pow(c310,2)+
    c202*c220*pow(c310,2)-c013*pow(c022,2)*c031+pow(c130,2)*c202*c220-c103*pow(c202,2)*c301-c103*pow(c121,2)*c301+pow(c013,2)*c022*c220+pow(c103,2)*c202*c220+c022*pow(c130,2)*c220+c022*pow(c031,2)*c202+
    c022*pow(c031,2)*c220-c022*c112*c130*c202-c013*c121*c202*c310+c022*c130*c220*c310-
    c013*c121*c130*c202+c013*c022*c031*c202-c031*c220*c301*c310+c130*c202*c220*
    c310-c022*c130*c211*c301-c022*c103*c211*c310-c013*c022*c103*c130-c022*c103*
    c130*c211-c013*c202*c301*c310-c013*c202*c211*c220-c031*c103*c112*c220-c031*
    c130*c220*c301-c031*c202*c211*c220-c022*c121*c220*c301+c013*c022*c031*c220-
    c022*c031*c103*c130-c013*c103*c202*c310-c022*c112*c202*c310-c022*c103*c121*
    c220-c031*c121*c202*c310-c031*c112*c220*c301+c022*c103*c202*c301-pow(c103,3)*c301-
    c013*pow(c031,3)-pow(c013,3)*c031-c103*pow(c301,3)-c130*pow(c310,3)-pow(c130,3)*c310+pow(c013,2)*c022*c202-
    pow(c112,2)*c130*c310+c022*c202*pow(c301,2)-c130*pow(c220,2)*c310+c202*c220*pow(c301,2)-pow(c031,2)*
    c103*c121-c013*c211*pow(c301,2)-c031*c211*pow(c310,2)-pow(c103,2)*c112*c310-c121*pow(c130,2)*c301-
    pow(c013,2)*c112*c130+c004*pow(c121,2)*c220+c013*c103*c112*c400+c040*c103*c112*c211+c031
    *c112*c121*c400+c040*c211*c301*c310+c040*c112*c211*c301+c013*c112*c121*c400+
    c004*c121*c211*c310+c013*c040*c103*c112+c004*c031*c121*c130+c004*c211*c301*
    c310+c004*c121*c130*c211+c031*c121*c130*c400)*144+(c040*c400+c040*c004+c004*
    c400)*(pow(c202,2)+pow(c022,2)+pow(c220,2))*18+(-pow(c004,2)*pow(c400,2)-pow(c004,2)*pow(c040,2)-pow(c040,2)*pow(c400,2))*
    7+(-pow(c022,2)*pow(c400,2)+pow(c004,2)*pow(c022,2)+pow(c040,2)*pow(c220,2)+pow(c004,2)*pow(c202,2)+pow(c202,2)*pow(c400,2)-
    pow(c040,2)*pow(c202,2)+pow(c022,2)*pow(c040,2)-pow(c004,2)*pow(c220,2)+pow(c220,2)*pow(c400,2))*42+(-pow(c040,2)*pow(c301,2)-
    pow(c031,2)*pow(c400,2)-pow(c004,2)*pow(c310,2)-pow(c013,2)*pow(c400,2)-pow(c040,2)*pow(c103,2)-pow(c004,2)*pow(c130,2))*28+(
    pow(c022,2)*pow(c130,2)+pow(c013,2)*pow(c202,2)+pow(c220,2)*pow(c301,2)+pow(c031,2)*pow(c220,2)+pow(c040,2)*pow(c121,2)+pow(c211,2)*
    pow(c400,2)+pow(c202,2)*pow(c310,2)+pow(c022,2)*pow(c103,2)+pow(c004,2)*pow(c112,2))*84+(c004*c220*pow(c022,2)+c040*
    c004*pow(c112,2)+c004*pow(c013,2)*c400+c004*pow(c301,2)*c400+c040*pow(c310,2)*c400+c004*c040*pow(c130,2)+pow(c022,2)*c040*c220+c004*pow(c310,2)*c400+c022*c040*pow(c220,2)+pow(c031,2)*c040*c400+c004*
    c040*pow(c103,2)+c004*pow(c031,2)*c040+pow(c004,2)*pow(c211,2)+pow(c040,2)*pow(c112,2)+pow(c040,2)*pow(c211,2)+pow(c112,2)*
    pow(c400,2)+pow(c004,2)*pow(c121,2)+pow(c121,2)*pow(c400,2)+c004*c220*pow(c202,2)+c004*c400*pow(c112,2)+c040*c004
    *pow(c121,2)+c004*c400*pow(c211,2)+c022*c400*pow(c220,2)+c022*c400*pow(c202,2)+c040*c400*pow(c211,2)+
    c040*c400*pow(c121,2)+c040*c202*pow(c220,2)+c040*c202*pow(c022,2)+c004*pow(c103,2)*c400+c004*c022*
    pow(c202,2)+c004*pow(c013,2)*c040+c040*pow(c130,2)*c400+c040*pow(c301,2)*c400+c004*pow(c022,2)*c202+
    pow(c202,2)*c220*c400+c202*pow(c220,2)*c400)*36+(pow(c004,3)*c040+c004*pow(c040,3)+c040*pow(c400,3)+
    pow(c040,3)*c400+pow(c004,3)*c400+c004*pow(c400,3))*6+(pow(c013,2)*pow(c040,2)+c220*pow(c400,3)+pow(c130,2)*pow(c400,2)+pow(c040,3)*c220-pow(c031,2)*pow(c040,2)+pow(c004,3)*c220+pow(c103,2)*pow(c400,2)-pow(c310,2)*pow(c400,2)-pow(c004,2)*
    pow(c013,2)+pow(c004,3)*c202-pow(c004,2)*pow(c103,2)+pow(c040,3)*c202+pow(c004,3)*c022-pow(c301,2)*pow(c400,2)+c022*
    pow(c400,3)+c022*pow(c040,3)+pow(c040,2)*pow(c310,2)+c202*pow(c400,3)+pow(c004,2)*pow(c301,2)-pow(c040,2)*pow(c130,2)+pow(c004,2)*pow(c031,2))*12)
    
    Invs.append((-pow(c400,4)-pow(c004,4)-pow(c040,4))*3+(-pow(c004,2)*pow(c400,2)-pow(c004,2)*pow(c040,2)-pow(c040,2)
    *pow(c400,2))*22+(-pow(c004,2)*c040*c220-pow(c040,2)*c202*c220-c004*c202*pow(c400,2)-c022*c202*
    pow(c400,2)-c022*c220*pow(c400,2)-pow(c004,2)*c022*c040-c004*c022*pow(c040,2)-pow(c004,2)*c022*c220-
    c004*c022*pow(c400,2)-pow(c004,3)*c022-c202*pow(c400,3)-c022*pow(c040,3)-pow(c004,3)*c202-c220*pow(c400,3)-
    pow(c040,3)*c220-pow(c004,2)*c202*c220-pow(c004,2)*c202*c400-pow(c040,2)*c220*c400-pow(c004,2)*c022*
    c202-c022*c040*pow(c400,2)-c004*pow(c040,2)*c202-pow(c004,2)*c220*c400-c202*c220*pow(c400,2)-c040*
    c220*pow(c400,2)-pow(c040,2)*c202*c400-c022*pow(c040,2)*c220-c022*pow(c040,2)*c202)*24+(c013*c040
    *c103*c130+c040*c130*c310*c400+c004*c013*c031*c040+c004*c013*c301*c310+c031*
    c040*c301*c310+c013*c103*c310*c400+c004*c031*c103*c130+c031*c130*c301*c400+
    c004*c103*c301*c400)*32+(-pow(c202,2)*pow(c400,2)-pow(c004,2)*pow(c202,2)+pow(c202,4)-pow(c004,2)*pow(c022,2)-
    pow(c040,2)*pow(c220,2)-pow(c022,2)*pow(c040,2)+pow(c220,4)-pow(c220,2)*pow(c400,2)+pow(c022,4))*36+(-c103*c301*pow(c400,2)-c013*pow(c040,2)*c211-pow(c004,2)*c103*c121-pow(c004,2)*c103*c301-pow(c004,2)*c112*c130-pow(c040,2)*
    c103*c121-c112*c130*pow(c400,2)-c112*c310*pow(c400,2)-pow(c040,2)*c112*c310-pow(c004,2)*c112*c310-
    pow(c004,2)*c013*c031-pow(c040,2)*c130*c310-c031*pow(c040,2)*c211-pow(c013,2)*pow(c040,2)-pow(c211,2)*pow(c400,2)
    -pow(c040,2)*pow(c310,2)-pow(c004,2)*pow(c112,2)-pow(c202,2)*pow(c310,2)-pow(c103,2)*pow(c400,2)-pow(c013,2)*pow(c202,2)-pow(c031,2)*
    pow(c112,2)-pow(c112,2)*pow(c301,2)-pow(c040,2)*pow(c121,2)-pow(c130,2)*pow(c211,2)-pow(c031,2)*pow(c220,2)-pow(c013,2)*pow(c121,2)-
    pow(c022,2)*pow(c103,2)-pow(c220,2)*pow(c301,2)-pow(c103,2)*pow(c211,2)-pow(c004,2)*pow(c031,2)-pow(c004,2)*pow(c301,2)-pow(c022,2)*
    pow(c130,2)-pow(c121,2)*pow(c310,2)-pow(c130,2)*pow(c400,2)-c121*c301*pow(c400,2)-c031*c211*pow(c400,2)-c103*c121
    *pow(c400,2)-pow(c040,2)*c112*c130-pow(c004,2)*c031*c211-pow(c040,2)*c121*c301-c130*c310*pow(c400,2)-
    pow(c004,2)*c130*c310-c013*c031*pow(c400,2)-c013*c211*pow(c400,2)-pow(c040,2)*c103*c301-c013*c031*
    pow(c040,2)-pow(c004,2)*c121*c301-pow(c004,2)*c013*c211)*48+(-pow(c130,2)*pow(c310,2)-pow(c013,2)*pow(c031,2)-
    pow(c004,2)*pow(c130,2)-pow(c103,2)*pow(c301,2)-pow(c040,2)*pow(c301,2)-pow(c031,2)*pow(c400,2)-pow(c040,2)*pow(c103,2)-pow(c004,2)*
    pow(c310,2)-pow(c013,2)*pow(c400,2))*64+(-pow(c022,2)*pow(c220,2)-pow(c022,2)*pow(c202,2)-pow(c202,2)*pow(c220,2))*72+(-
    pow(c040,2)*pow(c202,2)-pow(c022,2)*pow(c400,2)-pow(c004,2)*pow(c220,2))*84+(c013*c022*c031*c040+c004*c103*
    c211*c310+c013*c103*c130*c220+c031*c040*c202*c211+c004*c022*c103*c121+c121*
    c220*c301*c400-c022*c040*pow(c310,2)-c022*pow(c103,2)*c202-c022*c220*pow(c310,2)-pow(c013,2)*c022*
    c040-pow(c013,2)*c202*c400-pow(c103,2)*c220*c400-c040*c220*pow(c301,2)-c220*pow(c301,2)*c400-c202*
    c220*pow(c310,2)-pow(c031,2)*c220*c400-pow(c130,2)*c220*c400-pow(c130,2)*c202*c220-c202*pow(c310,2)*
    c400-pow(c013,2)*c022*c220-pow(c103,2)*c202*c220-c022*pow(c130,2)*c220-c022*pow(c103,2)*c220-c022*
    pow(c031,2)*c202-pow(c103,2)*c202*c400-c022*c040*pow(c301,2)-c040*pow(c103,2)*c220-pow(c013,2)*c220*
    c400-c004*pow(c031,2)*c202-pow(c031,2)*c202*c400-c004*c022*pow(c031,2)-c022*pow(c031,2)*c220+c022*
    c121*c301*c400+c031*c040*c103*c112+c040*c112*c130*c202+c013*c112*c301*c400+
    c013*c103*c220*c310+c004*c013*c121*c130+c004*c013*c202*c211+c004*c013*c211*
    c220+c004*c103*c121*c220+c031*c040*c211*c220+c112*c202*c310*c400+c022*c040*
    c112*c130+c031*c130*c202*c301+c022*c031*c301*c310+c031*c103*c130*c202+c013*
    c022*c301*c310+c022*c112*c310*c400+c031*c121*c310*c400+c040*c130*c211*c301-
    pow(c004,2)*pow(c211,2)-pow(c040,2)*pow(c112,2)-pow(c031,2)*pow(c211,2)-pow(c112,2)*pow(c310,2)-pow(c013,2)*pow(c211,2)-pow(c112,2)*
    pow(c130,2)-pow(c040,2)*pow(c211,2)-pow(c121,2)*pow(c301,2)-pow(c103,2)*pow(c121,2)-pow(c112,2)*pow(c400,2)-pow(c004,2)*pow(c121,2)-
    pow(c121,2)*pow(c400,2)-c022*pow(c130,2)*c202-c004*c022*pow(c301,2)-c004*c022*pow(c130,2)-c022*c220*
    pow(c301,2)-c004*c202*pow(c301,2)-c004*c022*pow(c103,2)-pow(c013,2)*c040*c220-c022*c040*pow(c130,2)-
    pow(c031,2)*c040*c220-pow(c013,2)*c022*c202-c022*c202*pow(c301,2)-pow(c031,2)*c202*c220-pow(c130,2)*
    c202*c400-c022*c202*pow(c310,2)-c202*c220*pow(c301,2)-c004*pow(c130,2)*c202-c022*c040*pow(c103,2)-
    c004*c022*pow(c310,2)-c004*c202*pow(c310,2)-pow(c013,2)*c202*c220-c040*c220*pow(c310,2)-c004*pow(c013,2)*c202+c103*c202*c301*c400+c031*c130*c211*c310+c004*c013*c022*c031+c121*c130*
    c301*c310+c013*c031*c103*c121+c013*c031*c112*c130+c013*c103*c211*c301+c130*
    c220*c310*c400+c103*c112*c301*c310+c040*c130*c220*c310+c004*c103*c202*c301)*
    96+(-pow(c103,2)*pow(c310,2)-pow(c031,2)*pow(c103,2)-pow(c130,2)*pow(c301,2)-pow(c013,2)*pow(c301,2)-pow(c031,2)*pow(c310,2)-
    pow(c013,2)*pow(c130,2))*112+(-c022*c202*pow(c220,2)-pow(c022,2)*c040*c220-c022*c040*pow(c220,2)-pow(c022,2)*c220*c400-pow(c130,2)*pow(c202,2)-pow(c103,2)*pow(c130,2)-c004*pow(c202,3)-pow(c022,3)*c220-pow(c031,2)*pow(c202,2)-
    c004*pow(c022,3)-pow(c022,3)*c202-pow(c202,3)*c220-pow(c220,3)*c400+pow(c103,2)*pow(c202,2)+pow(c130,2)*pow(c220,2)-
    c040*pow(c220,3)-c202*pow(c220,3)+pow(c022,2)*pow(c031,2)-pow(c022,2)*pow(c310,2)-pow(c202,3)*c400-pow(c022,2)*pow(c301,2)-
    pow(c031,2)*pow(c301,2)-pow(c013,2)*pow(c220,2)+pow(c013,2)*pow(c022,2)-pow(c103,2)*pow(c220,2)+pow(c220,2)*pow(c310,2)-pow(c013,2)*
    pow(c310,2)-c022*pow(c202,3)+pow(c202,2)*pow(c301,2)-c022*pow(c220,3)-pow(c022,3)*c040-c004*c022*pow(c202,2)-c004
    *c202*pow(c220,2)-c022*pow(c202,2)*c220-c004*pow(c022,2)*c202-c004*c022*pow(c220,2)-pow(c202,2)*c220*
    c400-c202*pow(c220,2)*c400-c040*pow(c202,2)*c220-c022*c040*pow(c202,2)-pow(c022,2)*c202*c400-pow(c022,2)*c202*c220)*144+(c121*c211*c310*c400-pow(c013,2)*c112*c310-c103*c301*pow(c310,2)-c121*
    c301*pow(c310,2)-c013*pow(c031,2)*c211-pow(c013,2)*c103*c301-c013*c031*pow(c301,2)-c130*pow(c301,2)*
    c310-c103*c121*pow(c301,2)-c103*c121*pow(c310,2)-pow(c013,2)*c121*c301-c013*c031*pow(c310,2)-pow(c103,2)*c121*c301-c031*c211*pow(c301,2)-c112*c130*pow(c310,2)-c112*c130*pow(c301,2)-c013*c031*pow(c130,2)-pow(c031,2)*c112*c310-c013*pow(c103,2)*c211+c211*c301*c310*c400+c031*c040*c112*c121+
    c031*c040*c121*c130+c004*c013*c112*c121+c004*c013*c103*c112+c112*c211*c301*
    c400+c004*c103*c112*c211+c040*c121*c130*c211-c121*pow(c301,3)-c112*pow(c130,3)-pow(c103,3)*
    c301+pow(c211,2)*pow(c301,2)-c013*pow(c031,3)-pow(c031,3)*c211+pow(c031,2)*pow(c121,2)-pow(c013,3)*c031+pow(c103,2)*
    pow(c112,2)-pow(c103,3)*c121-c103*pow(c301,3)+pow(c013,2)*pow(c112,2)+pow(c121,2)*pow(c130,2)-pow(c013,3)*c211+pow(c211,2)*
    pow(c310,2)-c130*pow(c310,3)-c112*pow(c310,3)-pow(c130,3)*c310-c013*pow(c130,2)*c211-pow(c031,2)*c130*c310-
    c031*pow(c130,2)*c211-pow(c103,2)*c130*c310-pow(c013,2)*c103*c121-pow(c031,2)*c103*c301-pow(c031,2)*
    c121*c301-pow(c013,2)*c031*c211-c112*pow(c130,2)*c310-c013*c031*pow(c103,2)-c112*pow(c301,2)*c310-
    pow(c031,2)*c112*c130-c031*pow(c103,2)*c211-pow(c031,2)*c103*c121-c013*c211*pow(c310,2)-c013*c211*
    pow(c301,2)-pow(c013,2)*c130*c310-c103*c121*pow(c130,2)-c031*c211*pow(c310,2)-pow(c103,2)*c112*c310-
    c103*pow(c130,2)*c301-pow(c103,2)*c112*c130-c121*pow(c130,2)*c301-pow(c013,2)*c112*c130+c013*c103*
    c121*c211+c112*c121*c301*c310+c031*c112*c130*c211)*192+(pow(c112,4)+pow(c211,4)+pow(c121,4)+
    c112*c202*c220*c310+c022*c031*c211*c220+c022*c121*c211*c310+c103*c112*c211*
    c220+c013*c022*c202*c211+c013*c112*c202*c301+c022*c112*c130*c220+c022*c112*
    c211*c301+c022*c031*c103*c112+c013*c112*c211*c310-c103*c121*pow(c220,2)-pow(c112,2)*c220
    *c400-c022*c202*pow(c211,2)-c013*c031*pow(c202,2)-pow(c022,2)*c103*c121-pow(c022,2)*c103*c301-c202
    *pow(c211,2)*c400-pow(c022,2)*c112*c130-pow(c022,2)*c130*c310-pow(c022,2)*c112*c310-pow(c112,2)*c202*
    c400-c112*pow(c220,2)*c310-pow(c211,2)*c220*c400-c031*pow(c202,2)*c211-pow(c022,2)*c121*c301-c013*
    c031*pow(c220,2)-c013*pow(c022,2)*c211-c022*c040*pow(c121,2)-c004*pow(c112,2)*c202-c013*pow(c202,2)*
    c211+c103*c202*c211*c310+c022*c103*c121*c202+c013*c112*c121*c220+c022*c121*
    c202*c301+c103*c121*c202*c220+c031*c112*c121*c202+c121*c202*c220*c301+c121*
    c130*c202*c211+c031*c121*c220*c310+c013*c022*c121*c130+c130*c211*c220*c301+
    c022*c112*c220*c310+c103*c112*c121*c130+c013*c022*c211*c220+c031*c121*c211*
    c301+c022*c031*c202*c211+c112*c130*c202*c220+pow(c211,2)*pow(c220,2)+pow(c022,2)*pow(c121,2)+pow(c112,2)*pow(c202,2)+pow(c202,2)*pow(c211,2)+pow(c022,2)*pow(c112,2)+pow(c121,2)*pow(c220,2)-c004*c022*pow(c211,2)-c103*c121*
    pow(c202,2)-c004*pow(c121,2)*c202-c004*c022*pow(c121,2)-c013*c211*pow(c220,2)-c112*c130*pow(c220,2)-
    c121*pow(c220,2)*c301-c022*pow(c112,2)*c220-c004*c202*pow(c211,2)-pow(c121,2)*c202*c400-c004*c022*
    pow(c112,2)-c040*pow(c112,2)*c220-c022*pow(c211,2)*c220-pow(c121,2)*c220*c400-c022*pow(c121,2)*c202-
    c121*pow(c202,2)*c301-c112*c130*pow(c202,2)-pow(c121,2)*c202*c220-c040*pow(c121,2)*c220-c022*c040*
    pow(c211,2)-c112*pow(c202,2)*c310-c130*pow(c202,2)*c310-pow(c112,2)*c202*c220-c103*pow(c220,2)*c301-
    c040*pow(c211,2)*c220-c022*c040*pow(c112,2)-pow(c022,2)*c031*c211-c031*c211*pow(c220,2))*288+(
    c211*c220*c301*c310+c022*c031*c121*c130+c202*c211*c301*c310+c013*c022*c103*
    c112+c013*c103*c112*c202+c031*c121*c130*c220)*384+(-c103*pow(c121,2)*c301-c013*
    c031*pow(c112,2)-pow(c121,2)*c130*c310-c013*pow(c121,2)*c211-c130*pow(c211,2)*c310-c103*pow(c112,2)*
    c301-c031*pow(c211,3)-c103*pow(c121,3)-c103*pow(c211,2)*c301-pow(c112,2)*c130*c310-pow(c112,3)*c310-
    c103*c121*pow(c211,2)-c013*c031*pow(c121,2)-pow(c112,3)*c130-c013*pow(c211,3)-pow(c121,3)*c301-c031*
    pow(c112,2)*c211-c112*pow(c121,2)*c310-c013*c031*pow(c211,2)-c112*c130*pow(c211,2)-pow(c112,2)*c121*
    c301)*576+(c121*c211*c220*c310+c103*c112*c202*c211+c121*c130*c211*c220+c112*
    c202*c211*c301+c013*c022*c112*c121+c022*c031*c112*c121)*864+(pow(c112,2)*pow(c211,2)+
    pow(c112,2)*pow(c121,2)+pow(c121,2)*pow(c211,2))*1008+c112*c121*c211*(c202+c220+c022)*1152)
    Invs.append(c112
    *c121*c211*(c202+c220+c022)*432+(-pow(c022,2)*pow(c220,2)-pow(c022,2)*pow(c202,2)-pow(c202,2)*pow(c220,2))*
    54+(pow(c022,2)*c202*c220+c022*c202*pow(c220,2)+c022*pow(c202,2)*c220)*108+(pow(c220,4)+pow(c202,4)+
    pow(c022,4))*39+(-c130*c202*c211*c301-c022*c121*c211*c310-c103*c112*c211*c220-c013
    *c112*c202*c301-c022*c112*c211*c301-c022*c031*c103*c112-c022*c031*c121*c310-
    c013*c121*c130*c220-c013*c112*c211*c310-c031*c103*c112*c202-c103*c202*c211*
    c310-c013*c112*c121*c220-c031*c112*c121*c202-c121*c130*c202*c211-c031*c121*
    c220*c310-c013*c022*c121*c130-c103*c211*c220*c310-c130*c211*c220*c301-c103*
    c112*c121*c130-c013*c022*c112*c301-c031*c121*c211*c301+pow(c112,2)*pow(c121,2)+pow(c121,2)*
    pow(c211,2)+pow(c112,2)*pow(c211,2)-c013*c103*c121*c211-c112*c121*c301*c310-c031*c112*c130*
    c211)*288+(pow(c121,2)*c202*c220+c022*c202*pow(c211,2)+c022*pow(c121,2)*c202+c013*c022*c112*
    c121+c121*c211*c220*c310+c022*pow(c211,2)*c220+c103*c112*c202*c211+c022*pow(c112,2)*c220
    +c121*c130*c211*c220+pow(c112,2)*c202*c220+c022*c031*c112*c121+c112*c202*c211*c301+
    c112*c211*c220*c301+c121*c202*c211*c310+c031*c112*c121*c220+c022*c121*c130*
    c211+c022*c103*c112*c211+c013*c112*c121*c202)*576+(-c112*pow(c220,2)*c310+c013*
    pow(c202,2)*c211+pow(c022,2)*c112*c130+c121*pow(c220,2)*c301+c112*pow(c202,2)*c310-c013*pow(c022,2)*
    c211-pow(c022,2)*c031*c211+pow(c022,2)*c103*c121+c031*c211*pow(c220,2)-c121*pow(c202,2)*c301-c112*
    c130*pow(c220,2)-c103*c121*pow(c202,2))*360+(-pow(c013,2)*pow(c031,2)-pow(c130,2)*pow(c310,2)-pow(c103,2)*pow(c301,2)
    )*80+(c211*c220*c301*c310-pow(c103,2)*pow(c211,2)+c031*c121*c130*c202+c121*c301*pow(c310,2)+
    c013*c103*c112*c202-pow(c130,2)*pow(c211,2)+c013*c022*c103*c112+c031*pow(c130,2)*c211+c013*
    c103*c112*c220-pow(c013,2)*pow(c121,2)+pow(c031,2)*c112*c130-pow(c112,2)*pow(c301,2)+c013*pow(c103,2)*c211+
    pow(c013,2)*c103*c121+c202*c211*c301*c310-pow(c031,2)*pow(c112,2)+c022*c211*c301*c310+c112*
    pow(c301,2)*c310+c031*c121*c130*c220+c022*c031*c121*c130-pow(c121,2)*pow(c310,2))*192+(-c022
    *pow(c220,3)+c040*pow(c220,3)+pow(c022,3)*c040+c004*pow(c022,3)-c022*pow(c202,3)+pow(c220,3)*c400+c004*pow(c202,3)+pow(c202,3)*c400-pow(c202,3)*c220-pow(c022,3)*c220-pow(c022,3)*c202-c202*pow(c220,3))*60+(c004*c013*
    c103*c112+c031*c040*c121*c130+c211*c301*c310*c400)*240+(pow(c112,4)+pow(c211,4)+c202*
    pow(c211,2)*c220-c013*c022*c121*c310-c103*c130*c211*c220-c013*c121*c220*c310-c031*
    c112*c202*c301-c103*c130*c202*c211-c022*c031*c112*c301+pow(c121,4)-c004*c031*c103*
    c112-c013*c040*c121*c130-c121*c211*c310*c400+c022*c112*c130*c202-c013*c121*
    c202*c310-c031*c040*c112*c121-c004*c013*c112*c301-c022*c121*c202*c301-c103*
    c121*c202*c220-c004*c013*c112*c121-c022*c103*c130*c211-c031*c040*c121*c310+
    c013*c202*c211*c220-c130*c211*c301*c400-c022*c112*c220*c310-c103*c211*c310*
    c400+c031*c202*c211*c220+c022*c121*c220*c301-c112*c211*c301*c400-c004*c103*
    c112*c211+c022*c112*c202*c310+c022*c103*c121*c220-c040*c121*c130*c211-c013*
    c022*c211*c220-c031*c112*c220*c301-c022*c031*c202*c211-c112*c130*c202*c220+
    c022*pow(c121,2)*c220+c022*pow(c112,2)*c202)*144+(-c013*c211*pow(c220,2)+pow(c022,2)*pow(c112,2)+c004*
    pow(c112,2)*c202-c031*pow(c202,2)*c211+c202*pow(c211,2)*c400-pow(c022,2)*c112*c310+pow(c112,2)*pow(c202,2)-
    c103*c121*pow(c220,2)+c004*c022*pow(c112,2)+c040*pow(c121,2)*c220+c022*c040*pow(c121,2)-pow(c022,2)*
    c121*c301+pow(c211,2)*pow(c220,2)+pow(c211,2)*c220*c400+pow(c022,2)*pow(c121,2)-c112*c130*pow(c202,2)+pow(c121,2)
    *pow(c220,2)+pow(c202,2)*pow(c211,2))*216+(-pow(c130,2)*pow(c202,2)+c040*pow(c130,2)*c202+c004*pow(c013,2)*c220-
    pow(c022,2)*pow(c301,2)+c004*pow(c220,3)+pow(c031,2)*c040*c400+pow(c022,3)*c400-pow(c031,2)*pow(c202,2)-pow(c013,2)*
    pow(c220,2)-pow(c022,2)*pow(c310,2)+c040*pow(c301,2)*c400+pow(c031,2)*c040*c202+c004*c040*pow(c130,2)+c004*
    pow(c013,2)*c400+c040*pow(c202,3)-pow(c103,2)*pow(c220,2)+c004*pow(c103,2)*c220+c022*pow(c301,2)*c400+c004*
    c040*pow(c103,2)+c004*pow(c310,2)*c400+c022*pow(c310,2)*c400)*24+(-c031*c040*c301*c310-c004*
    c013*c031*c040-c004*c103*c301*c400-c013*c040*c103*c130-c031*c130*c301*c400-
    c004*c031*c103*c130-pow(c031,2)*pow(c103,2)-pow(c103,2)*pow(c310,2)-pow(c013,2)*pow(c301,2)-pow(c013,2)*pow(c130,2)-
    c040*c130*c310*c400-pow(c130,2)*pow(c301,2)-pow(c031,2)*pow(c310,2)-c013*c103*c310*c400-c004*c013*
    c301*c310)*32+(-c022*c040*pow(c130,2)+c103*pow(c202,2)*c301-pow(c031,2)*c040*c220-c013*c031*
    pow(c202,2)-c004*pow(c013,2)*c202-c220*pow(c301,2)*c400-c004*c022*pow(c103,2)-pow(c022,2)*c103*c301-
    c130*pow(c202,2)*c310+c130*pow(c220,2)*c310-pow(c022,2)*c130*c310-c202*pow(c310,2)*c400+c013*pow(c022,2)*c031-c103*pow(c220,2)*c301-c013*c031*pow(c220,2))*72+(c013*c031*c130*c310+c013*c031*
    c103*c301+c103*c130*c301*c310-c013*c022*c031*c040-c004*c103*c211*c310-c040*
    c112*c130*c220-c013*c103*c130*c220-c031*c040*c202*c211-c013*c103*c130*c202-
    pow(c013,2)*c112*c310-c022*pow(c103,2)*c202-c103*c301*pow(c310,2)-c202*c220*pow(c310,2)-pow(c013,2)*
    c103*c301-c130*pow(c301,2)*c310-c103*c121*pow(c310,2)-pow(c013,2)*c121*c301-c022*pow(c130,2)*c220-
    c031*c211*pow(c301,2)-c112*c130*pow(c301,2)-c013*c031*pow(c130,2)-pow(c031,2)*c112*c310-c022*pow(c031,2)*c220-c031*c202*c301*c310-c022*c121*c301*c400-c022*c031*c040*c211-c031*c040*
    c103*c112-c040*c112*c130*c202-c121*c202*c301*c400-c013*c112*c301*c400-c004*
    c103*c121*c202-c013*c103*c220*c310-c031*c103*c130*c220-c004*c013*c121*c130-
    c004*c013*c211*c220-c004*c103*c121*c220-c031*c130*c202*c301-c022*c031*c301*
    c310-c013*c022*c103*c310-c031*c103*c130*c202-c013*c022*c301*c310-c004*c013*
    c022*c211-c112*c220*c310*c400-c022*c112*c310*c400-c013*c220*c301*c310-c031*
    c121*c310*c400-c040*c130*c211*c301-c022*c031*c130*c301-c121*pow(c301,3)-c112*pow(c130,3)
    +pow(c211,2)*pow(c301,2)-pow(c031,3)*c211+pow(c031,2)*pow(c121,2)+pow(c103,2)*pow(c112,2)-pow(c103,3)*c121+pow(c013,2)*pow(c112,2)+pow(c121,2)*pow(c130,2)-pow(c013,3)*c211+pow(c211,2)*pow(c310,2)-c112*pow(c310,3)-c013*pow(c130,2)*c211-pow(c031,2)
    *c130*c310-pow(c013,2)*c022*c202-pow(c031,2)*c121*c301-c202*c220*pow(c301,2)-c013*c031*pow(c103,2)
    -c031*pow(c103,2)*c211-c013*c211*pow(c310,2)-c103*c121*pow(c130,2)-pow(c103,2)*c112*c130-c103*c202
    *c301*c400-c031*c130*c211*c310-c004*c013*c022*c031-c121*c130*c301*c310-c013*
    c031*c103*c121-c013*c031*c112*c130-c013*c103*c211*c301-c130*c220*c310*c400-
    c103*c112*c301*c310-c040*c130*c220*c310-c004*c103*c202*c301)*96+(pow(c004,2)*pow(c040,2)+pow(c004,2)*pow(c400,2)+pow(c040,2)*pow(c400,2))+(c202*c220*pow(c400,2)+c022*pow(c040,2)*c220+pow(c004,2)*
    c022*c202)*18+(-pow(c202,2)*pow(c400,2)-pow(c004,2)*pow(c202,2)-pow(c004,2)*pow(c022,2)-pow(c022,2)*pow(c040,2)-pow(c040,2)*pow(c220,2)-pow(c220,2)*pow(c400,2))*15+(pow(c040,2)*pow(c301,2)+pow(c040,2)*pow(c103,2)+pow(c013,2)*pow(c400,2)+pow(c004,2)*
    pow(c130,2)+pow(c004,2)*pow(c310,2)+pow(c031,2)*pow(c400,2))*4+(-c022*c040*pow(c202,2)-c004*c022*pow(c220,2)-
    pow(c202,2)*c220*c400-c004*pow(c022,2)*c202-pow(c040,2)*c130*c310-pow(c022,2)*c040*c220-pow(c022,2)*
    c202*c400-c022*c040*pow(c220,2)-c121*c301*pow(c400,2)-c040*pow(c202,2)*c220-c130*c310*pow(c400,2)-
    pow(c040,2)*c112*c130-pow(c004,2)*c013*c211-c004*c202*pow(c220,2)-pow(c022,2)*c220*c400-c013*c031*
    pow(c040,2)-pow(c004,2)*c013*c031-pow(c004,2)*c103*c121-c004*c022*pow(c202,2)-pow(c004,2)*c103*c301-
    c112*c310*pow(c400,2)-c103*c301*pow(c400,2)-c202*pow(c220,2)*c400-c031*pow(c040,2)*c211)*36+(-
    c031*c103*c220*c310+c004*c022*c103*c121+c004*c022*c130*c310+c121*c220*c301*
    c400+c103*c220*c301*c400+c130*c202*c310*c400-c013*c022*c130*c301+c004*c013*
    c031*c202-c013*c301*c310*c400-c031*c040*c130*c301+c004*c130*c202*c310+c013*
    c031*c040*c220+c004*c220*pow(c310,2)+c004*pow(c103,2)*c202+c004*pow(c013,2)*c022+c022*pow(c031,2)*
    c400+pow(c013,2)*c022*c400+c022*pow(c103,2)*c220+c220*pow(c310,2)*c400-c031*c040*c103*c130-
    c013*c130*c220*c301-c031*c301*c310*c400+c004*c013*c202*c211+c004*c022*c103*
    c301+c004*c130*c220*c310-c013*c130*c202*c301+c040*c103*c202*c301+c040*c103*
    c220*c301+c031*c040*c211*c220+c112*c202*c310*c400+c013*c031*c202*c400+c022*
    c040*c112*c130-c022*c031*c103*c310+c022*c040*c103*c301-c004*c013*c103*c130+
    c013*c031*c220*c400+c022*c040*c130*c310+c013*c022*c031*c400-c004*c013*c103*
    c310-c031*c103*c202*c310-pow(c211,2)*pow(c400,2)-pow(c004,2)*pow(c211,2)-pow(c040,2)*pow(c112,2)-pow(c031,2)*pow(c211,2)-pow(c004,2)*pow(c112,2)-pow(c202,2)*pow(c310,2)-pow(c112,2)*pow(c310,2)+pow(c103,2)*pow(c202,2)+pow(c130,2)*pow(c220,2)-pow(c013,2)*pow(c202,2)-pow(c013,2)*pow(c211,2)+pow(c022,2)*pow(c031,2)-pow(c040,2)*pow(c121,2)-pow(c112,2)*pow(c130,2)-pow(c040,2)*pow(c211,2)
    -pow(c121,2)*pow(c301,2)-pow(c103,2)*pow(c121,2)-pow(c031,2)*pow(c220,2)-pow(c112,2)*pow(c400,2)-pow(c022,2)*pow(c103,2)-pow(c220,2)*
    pow(c301,2)+pow(c013,2)*pow(c022,2)-pow(c004,2)*pow(c121,2)-pow(c022,2)*pow(c130,2)+pow(c220,2)*pow(c310,2)-pow(c121,2)*pow(c400,2)+
    pow(c202,2)*pow(c301,2)+c022*pow(c130,2)*c202+c022*c220*pow(c301,2)+c040*pow(c130,2)*c220+pow(c031,2)*c202*
    c220+c040*c202*pow(c301,2)+c022*c202*pow(c310,2)+c202*pow(c301,2)*c400+c022*pow(c031,2)*c040+c040*
    pow(c103,2)*c202+c004*pow(c130,2)*c220+pow(c013,2)*c202*c220)*48+(-pow(c004,2)*c022*c400-pow(c040,2)*
    c202*c220-c022*pow(c040,2)*c400-pow(c004,2)*c022*c220-c022*c202*pow(c400,2)-c022*c220*pow(c400,2)-
    c004*c220*pow(c400,2)-pow(c004,2)*c202*c220+c022*pow(c400,3)-c004*pow(c040,2)*c220-pow(c004,2)*c040*
    c202-c022*pow(c040,2)*c202+pow(c004,3)*c220-c040*c202*pow(c400,2)+pow(c040,3)*c202)*6+(c040*pow(c400,3)-pow(c022,2)*pow(c400,2)-pow(c004,2)*pow(c220,2)-pow(c004,2)*c040*c400+pow(c004,3)*c400+pow(c004,3)*c040+c004*
    pow(c040,3)+pow(c040,3)*c400-pow(c040,2)*pow(c202,2)-c004*pow(c040,2)*c400-c004*c040*pow(c400,2)+c004*pow(c400,3)
    )*3+(-c004*c040*c202*c400+c013*pow(c040,2)*c211+pow(c004,2)*c112*c130+pow(c040,2)*c103*c121+
    c112*c130*pow(c400,2)+pow(c040,2)*c112*c310+pow(c004,2)*c112*c310-c004*c040*c220*c400-c004*
    c022*c040*c400-pow(c013,2)*pow(c040,2)+pow(c004,2)*pow(c103,2)-pow(c040,2)*pow(c310,2)+pow(c004,2)*pow(c013,2)-pow(c103,2)*
    pow(c400,2)-pow(c004,3)*c022+pow(c040,2)*pow(c130,2)+pow(c301,2)*pow(c400,2)+pow(c310,2)*pow(c400,2)-c202*pow(c400,3)-c022*
    pow(c040,3)-pow(c004,3)*c202+pow(c031,2)*pow(c040,2)-pow(c004,2)*pow(c031,2)-pow(c004,2)*pow(c301,2)-c220*pow(c400,3)-pow(c040,3)*c220-pow(c130,2)*pow(c400,2)+c031*c211*pow(c400,2)+c103*c121*pow(c400,2)+pow(c004,2)*c031*c211+pow(c040,2)
    *c121*c301+pow(c004,2)*c130*c310+c013*c031*pow(c400,2)+c013*c211*pow(c400,2)+pow(c040,2)*c103*c301
    +pow(c004,2)*c121*c301)*12)
    Invs.append((pow(c040,4)+pow(c004,2)*pow(c400,2)+pow(c004,2)*pow(c040,2)+pow(c040,2)*pow(c400,2)+pow(c400,4)+pow(c004,4))*28+(pow(c301,4)+pow(c310,4)+pow(c013,4)+pow(c103,4)+pow(c130,4)+pow(c031,4))*112+(-c040*c400*
    pow(c220,2)-c040*c004*pow(c022,2)-c004*c400*pow(c202,2))*168+(pow(c013,2)*pow(c040,2)+pow(c103,2)*pow(c130,2)+
    pow(c004,2)*pow(c103,2)+pow(c040,2)*pow(c310,2)-pow(c013,2)*pow(c400,2)+pow(c004,2)*pow(c013,2)-pow(c040,2)*pow(c301,2)+pow(c103,2)*
    pow(c400,2)-pow(c004,2)*pow(c130,2)+pow(c013,2)*pow(c103,2)+pow(c040,2)*pow(c130,2)+pow(c301,2)*pow(c400,2)+pow(c301,2)*pow(c310,2)+
    pow(c310,2)*pow(c400,2)-pow(c040,2)*pow(c103,2)-pow(c013,2)*pow(c301,2)-pow(c031,2)*pow(c400,2)+pow(c031,2)*pow(c301,2)-pow(c031,2)*
    pow(c310,2)-pow(c103,2)*pow(c310,2)-pow(c031,2)*pow(c103,2)-pow(c004,2)*pow(c310,2)-pow(c013,2)*pow(c130,2)+pow(c031,2)*pow(c040,2)+
    pow(c004,2)*pow(c031,2)+pow(c031,2)*pow(c130,2)+pow(c004,2)*pow(c301,2)+pow(c013,2)*pow(c310,2)-pow(c130,2)*pow(c301,2)+pow(c130,2)*
    pow(c400,2))*224+(-c004*pow(c013,2)*c400+c004*pow(c301,2)*c400+c022*pow(c040,2)*c400+pow(c004,2)*c040*
    c220+c040*pow(c310,2)*c400-c004*c202*pow(c400,2)-c004*c040*pow(c130,2)-c004*pow(c310,2)*c400-pow(c031,2)*c040*c400-c004*c040*pow(c103,2)+c004*pow(c040,2)*c220+pow(c004,2)*c040*c202+c004*pow(c031,2)*
    c040-pow(c004,2)*c022*c040-c004*c022*pow(c040,2)+c004*c220*pow(c400,2)+c004*c022*pow(c400,2)+c004*
    pow(c202,3)+c004*pow(c022,3)+pow(c220,3)*c400-pow(c202,2)*pow(c310,2)+c040*pow(c220,3)-pow(c013,2)*pow(c202,2)+pow(c202,3)*
    c400-pow(c031,2)*pow(c220,2)-pow(c022,2)*pow(c103,2)-pow(c220,2)*pow(c301,2)-pow(c022,2)*pow(c130,2)+pow(c022,3)*c040+c004*
    pow(c103,2)*c400+c004*pow(c013,2)*c040-pow(c004,2)*c202*c400+c040*pow(c130,2)*c400-pow(c040,2)*c220*
    c400-c040*pow(c301,2)*c400+c022*c040*pow(c400,2)+pow(c004,2)*c022*c400+c004*pow(c040,2)*c202+pow(c004,2)*c220*c400-c040*c220*pow(c400,2)+pow(c040,2)*c202*c400+c040*c202*pow(c400,2))*336+(c004*
    pow(c040,2)*c400+c004*c040*pow(c400,2)+pow(c004,2)*c040*c400)*392+(-c004*c103*c301*c400-c004
    *c013*c031*c040-c040*c130*c310*c400)*448+(c022*c040*pow(c310,2)+c022*pow(c103,2)*c400-
    c004*c220*pow(c310,2)+c004*pow(c103,2)*c202+pow(c013,2)*c022*c040-pow(c013,2)*c202*c400+pow(c103,2)*
    c220*c400-c040*c220*pow(c301,2)-pow(c031,2)*c220*c400+pow(c130,2)*c220*c400+c004*pow(c013,2)*c022+
    c022*pow(c130,2)*c400-c022*pow(c031,2)*c400-pow(c013,2)*c022*c400+pow(c103,2)*c202*c400-c022*c040*
    pow(c301,2)-c040*pow(c103,2)*c220+c040*c202*pow(c310,2)-pow(c013,2)*c220*c400+c220*pow(c310,2)*c400+
    c004*pow(c031,2)*c202-pow(c031,2)*c202*c400+c004*c022*pow(c031,2)+c004*pow(c031,2)*c220+pow(c004,2)*
    pow(c211,2)+pow(c211,2)*pow(c301,2)+pow(c040,2)*pow(c112,2)+pow(c031,2)*pow(c211,2)+pow(c112,2)*pow(c310,2)+pow(c040,2)*pow(c202,2)+
    pow(c013,2)*pow(c211,2)+pow(c031,2)*pow(c121,2)+pow(c022,2)*pow(c400,2)+pow(c112,2)*pow(c130,2)+pow(c040,2)*pow(c211,2)+pow(c103,2)*
    pow(c112,2)+pow(c121,2)*pow(c301,2)+pow(c103,2)*pow(c121,2)+pow(c013,2)*pow(c112,2)+pow(c121,2)*pow(c130,2)+pow(c112,2)*pow(c400,2)+
    pow(c004,2)*pow(c220,2)+pow(c004,2)*pow(c121,2)+pow(c211,2)*pow(c310,2)+pow(c121,2)*pow(c400,2)+c004*c022*pow(c301,2)-c004*
    c022*pow(c130,2)+c004*c202*pow(c301,2)+c040*pow(c130,2)*c220+pow(c013,2)*c040*c220-c040*c202*pow(c301,2)+pow(c130,2)*c202*c400+c202*pow(c301,2)*c400+c022*pow(c031,2)*c040+c004*c220*pow(c301,2)-c040*
    pow(c103,2)*c202+pow(c013,2)*c040*c202-c004*pow(c130,2)*c202-c004*pow(c130,2)*c220-c022*c040*pow(c103,2)-c004*c022*pow(c310,2)-c004*c202*pow(c310,2)+c040*c220*pow(c310,2))*672+(c013*c130*c301*
    c400-pow(c040,2)*c103*c301+c031*c040*c301*c310-c004*c040*c103*c301+c004*c031*c103*
    c130+c031*c130*c301*c400-c004*c130*c310*c400+c013*c103*c310*c400+c031*c103*
    c310*c400+c013*c040*c130*c301+c031*c040*c103*c310-pow(c004,2)*c130*c310-c013*c031*
    pow(c400,2)-c004*c013*c031*c400-c040*c103*c301*c400+c004*c013*c301*c310-c013*c031*
    c040*c400+c004*c031*c103*c310+c004*c013*c130*c301-c004*c040*c130*c310+c013*
    c040*c103*c130)*896+(c004*c220*pow(c022,2)+c040*c004*pow(c112,2)+pow(c112,4)+pow(c211,4)+pow(c121,4)+
    pow(c022,2)*c040*c220+c022*c040*pow(c220,2)+pow(c103,2)*pow(c202,2)+pow(c130,2)*pow(c220,2)+pow(c022,2)*pow(c031,2)+
    pow(c013,2)*pow(c022,2)+pow(c220,2)*pow(c310,2)+pow(c202,2)*pow(c301,2)+c004*c220*pow(c202,2)+c004*c400*pow(c112,2)+
    c040*c004*pow(c121,2)+c004*c400*pow(c211,2)+c022*c400*pow(c220,2)+c022*c400*pow(c202,2)+c040*c400*
    pow(c211,2)+c040*c400*pow(c121,2)+c040*c202*pow(c220,2)+c040*c202*pow(c022,2)+c004*c022*pow(c202,2)+
    c004*pow(c022,2)*c202+pow(c202,2)*c220*c400+c202*pow(c220,2)*c400)*1008+(pow(c130,2)*pow(c310,2)+c004*
    c040*c202*c400+pow(c013,2)*pow(c031,2)+c004*c022*c040*c400+c004*c040*c220*c400+pow(c103,2)*
    pow(c301,2))*1120+(c040*c400*pow(c202,2)+c004*c400*pow(c022,2)+c040*c400*pow(c022,2)+c004*c400*
    pow(c220,2)+c040*c004*pow(c202,2)+c040*c004*pow(c220,2))*1176+(-c013*c031*c040*c202+c040*
    c103*c211*c310+c013*c103*c130*c220-c031*c040*c202*c211+c004*c031*c301*c310-
    c004*c022*c103*c121+c013*c103*c130*c400+c004*c031*c103*c112-c121*c220*c301*
    c400-c040*c130*c202*c310+c013*c040*c112*c301+c013*c040*c121*c130-c103*c220*
    c301*c400-c130*c202*c310*c400-c004*c013*c031*c202+c121*c211*c310*c400+c013*
    c301*c310*c400+c031*c040*c130*c301-c013*c031*c040*c220-c013*pow(c022,2)*c031-pow(c004,2)
    *c112*c130-c103*pow(c202,2)*c301-pow(c040,2)*c103*c121-pow(c004,2)*c112*c310-c022*c121*c301*
    c400+c211*c301*c310*c400+c031*c040*c103*c130-c040*c112*c130*c202+c031*c040*
    c112*c121+c031*c103*c112*c400+c013*c121*c130*c400+c013*c040*c301*c310+c031*
    c040*c121*c130+c004*c031*c130*c301-c004*c013*c031*c220+c013*c103*c220*c310+
    c004*c031*c121*c310-c022*c103*c301*c400+c031*c301*c310*c400+c004*c013*c112*
    c301-c004*c013*c202*c211-c004*c022*c103*c301-c004*c013*c211*c220-c004*c103*
    c121*c220+c004*c013*c112*c121-c031*c040*c211*c220+c004*c013*c103*c112-c112*
    c202*c310*c400-c022*c040*c112*c130+c031*c130*c202*c301+c031*c040*c121*c310-
    c022*c130*c310*c400+c130*c211*c301*c400+c022*c031*c301*c310+c013*c040*c103*
    c310+c004*c130*c211*c301-c004*c103*c220*c301+c004*c013*c103*c130+c103*c211*
    c310*c400+c031*c103*c130*c202+c112*c211*c301*c400+c004*c103*c112*c211+c013*
    c022*c301*c310+c031*c103*c130*c400-c022*c112*c310*c400-c022*c040*c130*c310+
    c040*c121*c130*c211+c004*c013*c103*c310+c040*pow(c202,3)+pow(c022,3)*c400+c004*pow(c220,3)+
    c004*c022*c220*c400+c004*c040*c202*c220+c022*c040*c202*c400-c040*c004*c121*
    c103-c040*c004*c112*c310-c040*c004*c121*c301-c040*c004*c130*c112-c004*c400*
    c211*c031-c004*c400*c211*c013-c004*c400*c112*c310-c004*c400*c130*c112-c040*
    c400*c121*c103-c040*c400*c211*c031-c040*c400*c211*c013-c040*c400*c121*c301-
    c031*c211*pow(c400,2)-c130*pow(c220,2)*c310-pow(c040,2)*c121*c301-c013*c211*pow(c400,2))*1344+(
    pow(c220,4)+pow(c202,4)+pow(c022,4))*1428+(c202+c220+c022)*(c013*c130*c301+c031*c103*c310)*
    1792+(c022*pow(c121,2)*c400+c040*pow(c112,2)*c202+c040*c202*pow(c211,2)+c022*pow(c112,2)*c400+
    c004*pow(c211,2)*c220+pow(c220,2)*pow(c112,2)+pow(c022,2)*pow(c211,2)+pow(c202,2)*pow(c121,2)-c004*c031*c211*c220
    -c040*c112*c202*c310+c022*c202*pow(c220,2)+pow(c112,2)*c220*c400+c004*c040*pow(c211,2)+pow(c112,2)
    *c202*c400+c040*pow(c112,2)*c400+pow(c022,2)*c220*c400-c022*c121*c202*c301-c103*c121*
    c202*c220-c013*c040*c202*c211-c022*c112*c220*c310-c022*c103*c121*c400-c022*
    c112*c130*c400-c004*c121*c220*c301-c013*c022*c211*c220-c022*c031*c202*c211-
    c112*c130*c202*c220+pow(c112,2)*pow(c121,2)+pow(c121,2)*pow(c211,2)+pow(c031,2)*pow(c112,2)+pow(c112,2)*pow(c301,2)+
    pow(c130,2)*pow(c211,2)+pow(c112,2)*pow(c211,2)+pow(c013,2)*pow(c121,2)+pow(c103,2)*pow(c211,2)+pow(c121,2)*pow(c310,2)+c004*
    c220*pow(c112,2)+c022*c400*pow(c211,2)+c040*c202*pow(c121,2)+c004*c022*pow(c211,2)+c004*pow(c121,2)*
    c202+c004*c022*pow(c121,2)+c004*c202*pow(c220,2)+c004*c202*pow(c211,2)+pow(c121,2)*c202*c400+c004*
    pow(c121,2)*c400+c040*pow(c112,2)*c220+c022*pow(c202,2)*c220+pow(c121,2)*c220*c400+c004*c022*pow(c220,2)+c040*pow(c202,2)*c220+c022*c040*pow(c211,2)+c022*c040*pow(c202,2)+c040*pow(c211,2)*c220+c022*
    c040*pow(c112,2)+pow(c022,2)*c202*c400+pow(c022,2)*c202*c220+c004*pow(c121,2)*c220)*2016+(-c013*
    c022*c031*c400-c004*c130*c220*c310-c040*c103*c202*c301)*2464+(c130*c202*c211*
    c301+c013*c103*c130*c202+c013*c112*c202*c301+c022*c031*c103*c112+c022*c031*
    c121*c310+c013*c121*c130*c220+c013*c112*c220*c301-c013*c031*pow(c202,2)-pow(c022,2)*c103
    *c301-pow(c022,2)*c130*c310-c013*c031*pow(c220,2)+c031*c202*c301*c310+c031*c103*c112*
    c202+c202*c211*c301*c310+c103*c202*c211*c310+c031*c103*c130*c220+c013*c121*
    c130*c202+c031*c220*c301*c310+c013*c103*c112*c202+c211*c220*c301*c310+c031*
    c121*c220*c310+c022*c130*c211*c301+c013*c022*c121*c130+c022*c103*c211*c310+
    c013*c022*c103*c130+c013*c202*c301*c310+c103*c211*c220*c310+c031*c103*c112*
    c220+c130*c211*c220*c301+c013*c022*c103*c310+c013*c022*c103*c112+c031*c130*
    c220*c301+c031*c121*c130*c220+c022*c031*c103*c130+c013*c103*c202*c310+c022*
    c031*c121*c130+c013*c220*c301*c310+c022*c031*c130*c301+c031*c121*c202*c310+
    c013*c022*c112*c301+pow(c022,3)*c220+pow(c022,3)*c202+pow(c202,3)*c220+c202*pow(c220,3)+c022*pow(c202,3)+c022*pow(c220,3)-c004*c220*c112*c310-c004*c220*c130*c112-c004*c022*c112*c310-c004
    *c022*c130*c112-c220*c400*c211*c031-c220*c400*c211*c013-c004*c202*c112*c310-
    c004*c202*c130*c112-c022*c400*c211*c031-c022*c400*c211*c013-c022*c040*c121*
    c103-c022*c040*c121*c301-c202*c400*c211*c031-c202*c400*c211*c013-c040*c202*
    c121*c103-c040*c202*c121*c301-c220*c040*c121*c103-c220*c040*c121*c301-c130*
    pow(c202,2)*c310-c103*pow(c220,2)*c301+c031*c130*c211*c310+c121*c130*c301*c310+c013*c031
    *c103*c121+c013*c031*c112*c130+c013*c103*c211*c301+c103*c112*c301*c310)*2688+
    (pow(c121,2)*pow(c220,2)+pow(c022,2)*pow(c121,2)+pow(c112,2)*pow(c202,2)+pow(c211,2)*pow(c220,2)+pow(c022,2)*pow(c112,2)+pow(c202,2)*
    pow(c211,2))*3024+(-c004*c022*c130*c310-c040*c103*c220*c301-c004*c130*c202*c310-
    c013*c031*c202*c400-c013*c031*c220*c400-c022*c040*c103*c301)*3136+(-c022*c103
    *c220*c301-c022*c130*c202*c310-c013*c031*c202*c220)*3360+(pow(c202,2)*pow(c220,2)+pow(c022,2)*pow(c202,2)+pow(c022,2)*pow(c220,2))*3528+(c202*pow(c211,2)*c220-c112*c202*c220*c310-c022*c031*
    c211*c220+c022*c121*c211*c310-c103*c202*c220*c301+c103*c112*c211*c220-c013*
    c022*c202*c211-c022*c112*c130*c220+c022*c112*c211*c301-pow(c022,2)*c103*c121-pow(c022,2)
    *c112*c130-c013*pow(c202,2)*c211-c022*c112*c130*c202+c013*c121*c202*c310-c022*c130*
    c220*c310-c022*c103*c121*c202+c022*c112*c121*c211+c112*c121*c202*c211+c112*
    c121*c211*c220+c013*c112*c121*c220-c013*c022*c031*c202+c031*c112*c121*c202-
    c121*c202*c220*c301+c121*c130*c202*c211-c130*c202*c220*c310+c022*c103*c130*
    c211-c013*c202*c211*c220-c031*c202*c211*c220-c022*c121*c220*c301-c013*c022*
    c031*c220-c022*c112*c202*c310-c022*c103*c121*c220+c031*c112*c220*c301-c022*
    c103*c202*c301-c121*pow(c220,2)*c301-c112*pow(c202,2)*c310-c031*c211*pow(c220,2)+c022*pow(c121,2)*
    c220+c022*pow(c112,2)*c202)*4032+(c013*c103*c121*c211+c112*c121*c301*c310+c031*
    c112*c130*c211)*5376)
    Invs.append((-pow(c022,2)*pow(c112,2)-pow(c121,2)*pow(c220,2)-pow(c022,2)*pow(c121,2)-pow(c112,2)*pow(c202,2)-pow(c202,2)*pow(c211,2)-pow(c211,2)*pow(c220,2))*10080+(pow(c022,2)*c202*c220+c022*c202*pow(c220,2)+c022
    *pow(c202,2)*c220)*14112+(-c103*pow(c121,3)-c031*pow(c211,3)-pow(c112,3)*c130-c013*pow(c211,3)-pow(c121,3)*
    c301-pow(c112,3)*c310)*32256+(c121*c130*c211*c220+c103*c112*c202*c211+c013*c112*
    c211*c310+c022*c031*c112*c121+c121*c211*c220*c310+c013*c022*c112*c121+c103*
    c112*c121*c130+c112*c202*c211*c301+c031*c121*c211*c301)*48384+(c013*c031*c130
    *c310+c013*c022*c121*c310+c103*c130*c211*c220+c013*c121*c220*c310+c031*c112*
    c202*c301+c103*c130*c202*c211+c022*c031*c112*c301+c013*c031*c103*c301+c103*
    c130*c301*c310+c031*c103*c211*c301+c013*c031*c112*c310+c103*c121*c130*c310+
    c013*c130*c211*c310+c103*c112*c130*c301-c022*c121*c211*c310-c103*c112*c211*
    c220-c022*c112*c211*c301-c013*c112*c121*c220-c031*c112*c121*c202-c121*c130*
    c202*c211+c013*c031*c121*c301+c112*c211*c220*c301+c121*c202*c211*c310+c031*
    c112*c121*c220+c022*c121*c130*c211+c022*c103*c112*c211+c013*c112*c121*c202)*
    24192+(c022*pow(c211,2)*c220+c112*c121*c130*c301+c013*c112*c130*c211+pow(c121,2)*c202*
    c220+c022*pow(c121,2)*c202+c013*c121*c211*c301+c022*c202*pow(c211,2)+c022*pow(c112,2)*c220+
    pow(c112,2)*c202*c220+c031*c112*c211*c310+c103*c112*c121*c310+c031*c103*c121*c211)*
    40320+(-c013*c031*pow(c202,2)-c103*pow(c220,2)*c301-pow(c022,2)*c130*c310-pow(c022,2)*c103*c301-
    c130*pow(c202,2)*c310-c013*c031*pow(c220,2))*20160+(-pow(c022,2)*c112*c310-c103*c121*pow(c220,2)-
    c112*c130*pow(c202,2)-pow(c022,2)*c121*c301-c013*c211*pow(c220,2)-c031*pow(c202,2)*c211)*36288+(-
    pow(c031,2)*pow(c301,2)-pow(c013,2)*pow(c310,2)-pow(c103,2)*pow(c130,2))*9408+(-pow(c103,2)*pow(c310,2)-pow(c031,2)*pow(c103,2)
    -pow(c130,2)*pow(c301,2)-pow(c013,2)*pow(c301,2)-pow(c031,2)*pow(c310,2)-pow(c013,2)*pow(c130,2))*5824+(-pow(c013,2)*pow(c121,2)-pow(c031,2)*pow(c112,2)-pow(c103,2)*pow(c211,2)-pow(c121,2)*pow(c310,2)-pow(c112,2)*pow(c301,2)-pow(c130,2)*pow(c211,2))*
    22848+(-pow(c202,2)*pow(c310,2)-pow(c220,2)*pow(c301,2)-pow(c022,2)*pow(c130,2)-pow(c013,2)*pow(c202,2)-pow(c031,2)*pow(c220,2)
    -pow(c022,2)*pow(c103,2))*4704+(-pow(c130,4)-pow(c310,4)+pow(c130,2)*pow(c220,2)+pow(c202,2)*pow(c301,2)+pow(c103,2)*pow(c202,2)-pow(c013,4)-pow(c103,4)-pow(c031,4)-pow(c301,4)+pow(c022,2)*pow(c031,2)+pow(c220,2)*pow(c310,2)+pow(c013,2)*pow(c022,2))*672+
    (c040*c400*pow(c202,2)+c004*c400*pow(c022,2)+c040*c400*pow(c022,2)+c004*c400*pow(c220,2)+c040*c004
    *pow(c202,2)+c040*c004*pow(c220,2))*5040+(c004*c220*pow(c202,2)+pow(c202,3)*c220+c022*pow(c220,3)+pow(c022,3)*c220+c004*c220*pow(c022,2)-pow(c112,4)+c202*pow(c220,3)+c022*c400*pow(c202,2)+c040*pow(c112,2)*c400+
    pow(c022,3)*c202+c004*c040*c202*c220+c040*c202*pow(c022,2)+c004*c040*pow(c211,2)+c022*c400*
    pow(c220,2)+c022*c040*c202*c400+c004*c022*c220*c400+c022*pow(c202,3)-pow(c121,4)+c040*c202*
    pow(c220,2)+c004*pow(c121,2)*c400-pow(c211,4))*6048+(c013*c103*c310*c400+c031*c130*c301*c400
    +c004*c013*c301*c310+c031*c040*c301*c310+c004*c031*c103*c130+c013*c040*c103*
    c130)*3584+(-c013*c031*c040*c400-c004*c130*c310*c400-c040*c103*c301*c400-c004
    *c040*c130*c310-c004*c040*c103*c301-c004*c013*c031*c400)*6720+(-c013*c022*
    c031*c400-c004*c130*c220*c310-c040*c103*c202*c301)*17472+(c004*c103*c211*c310
    +c022*c031*c301*c310+c013*c022*c103*c112+c013*c103*c220*c310+c031*c130*c211*
    c310+c031*c130*c202*c301+c013*c112*c301*c400+c013*c022*c301*c310+c022*c031*
    c121*c130+c121*c130*c301*c310+c013*c103*c130*c220+c013*c031*c112*c130+c013*
    c031*c103*c121+c013*c103*c211*c301+c202*c211*c301*c310+c031*c121*c310*c400+
    c031*c121*c130*c220+c031*c103*c130*c202+c004*c013*c121*c130+c040*c130*c211*
    c301+c013*c103*c112*c202+c031*c040*c103*c112+c103*c112*c301*c310+c211*c220*
    c301*c310)*10752+(-c013*pow(c202,2)*c211-c022*c130*c202*c310-c121*pow(c202,2)*c301+pow(c022,3)*c400-pow(c022,2)*c031*c211+pow(c112,2)*pow(c211,2)-c022*c103*c220*c301+pow(c121,2)*pow(c211,2)-c013*
    c031*c202*c220-pow(c022,2)*c103*c121+pow(c112,2)*pow(c121,2)-c112*c130*pow(c220,2)+c040*pow(c202,3)-
    pow(c022,2)*c112*c130-c121*pow(c220,2)*c301+c004*pow(c220,3)-c112*pow(c220,2)*c310-c031*c211*pow(c220,2)-c103*c121*pow(c202,2)-c013*pow(c022,2)*c211-c112*pow(c202,2)*c310)*12096+(-pow(c301,2)*pow(c310,2)-
    pow(c013,2)*pow(c103,2)+c004*c040*c220*c400+c004*c040*c202*c400-pow(c031,2)*pow(c130,2)+c004*c022*
    c040*c400)*1344+(-pow(c013,2)*pow(c031,2)-c004*c103*c301*c400-c040*c130*c310*c400-c004*
    c013*c031*c040-pow(c130,2)*pow(c310,2)-pow(c103,2)*pow(c301,2))*448+(c022*pow(c121,2)*c400+c040*pow(c112,2)
    *c202+c040*c202*pow(c211,2)+c022*pow(c112,2)*c400+c004*pow(c211,2)*c220+c013*c112*c202*c301+
    c022*c031*c103*c112-c013*c031*pow(c211,2)+c013*pow(c031,2)*c211-c013*c031*pow(c121,2)-c103*
    pow(c121,2)*c301+c103*c121*pow(c301,2)+pow(c103,2)*c121*c301+c112*c130*pow(c310,2)-c013*c031*pow(c112,2)-c103*pow(c112,2)*c301-c130*pow(c211,2)*c310-c022*c112*c130*c202-c013*c121*c202*c310+
    c103*c202*c211*c310+c031*c121*c220*c310+c013*c022*c121*c130-c022*c103*c130*
    c211-c013*c202*c211*c220+c130*c211*c220*c301-c031*c202*c211*c220-c022*c121*
    c220*c301-c022*c112*c202*c310-c022*c103*c121*c220-c031*c112*c220*c301-pow(c112,2)*
    c130*c310+pow(c013,2)*c031*c211+c112*pow(c130,2)*c310-c103*pow(c211,2)*c301-pow(c121,2)*c130*c310+
    c004*pow(c121,2)*c220)*16128+(-c031*c040*c202*c211+c031*c103*c220*c310+c013*c022*
    c130*c301+c121*c211*c310*c400-c022*c121*c301*c400+c211*c301*c310*c400-c040*
    c112*c130*c202+c031*c040*c112*c121+c031*c040*c121*c130+c013*c130*c220*c301-
    c004*c013*c211*c220+c013*c130*c202*c301-c004*c103*c121*c220+c004*c013*c112*
    c121+c004*c013*c103*c112+c022*c031*c103*c310+c112*c211*c301*c400+c004*c103*
    c112*c211-c022*c112*c310*c400+c040*c121*c130*c211+c031*c103*c202*c310-pow(c130,2)*
    pow(c202,2)-pow(c031,2)*pow(c202,2)-pow(c022,2)*pow(c310,2)-pow(c022,2)*pow(c301,2)-pow(c013,2)*pow(c220,2)-pow(c103,2)*pow(c220,2))*
    5376+(c040*c004*pow(c112,2)-c004*c031*c211*c220-c040*c112*c202*c310+c013*pow(c022,2)*
    c031+c103*pow(c202,2)*c301-c004*c103*c121*c400-c004*c031*c040*c211-c022*c121*c202*
    c301-c103*c121*c202*c220-c013*c040*c202*c211-c004*c121*c301*c400-c004*c013*
    c040*c211-c022*c112*c220*c310-c022*c103*c121*c400-c040*c112*c310*c400-c022*
    c112*c130*c400-c004*c121*c220*c301-c013*c022*c211*c220-c040*c112*c130*c400-
    c022*c031*c202*c211-c112*c130*c202*c220-pow(c211,2)*pow(c301,2)-pow(c031,2)*pow(c211,2)-pow(c112,2)*
    pow(c310,2)-pow(c013,2)*pow(c211,2)-pow(c031,2)*pow(c121,2)-pow(c112,2)*pow(c130,2)-pow(c103,2)*pow(c112,2)-pow(c121,2)*pow(c301,2)-
    pow(c103,2)*pow(c121,2)-pow(c013,2)*pow(c112,2)-pow(c121,2)*pow(c130,2)-pow(c211,2)*pow(c310,2)+c004*c400*pow(c112,2)+c040*
    c004*pow(c121,2)+c004*c400*pow(c211,2)+c040*c400*pow(c211,2)+c040*c400*pow(c121,2)+c004*c022*c202*
    c220+c022*c040*c202*c220+c022*c202*c220*c400-c040*c004*c121*c103-c040*c004*
    c112*c310-c040*c004*c121*c301-c040*c004*c130*c112-c004*c400*c211*c031-c004*
    c400*c211*c013-c004*c400*c112*c310-c004*c400*c130*c112-c040*c400*c121*c103-
    c040*c400*c211*c031-c040*c400*c211*c013-c040*c400*c121*c301+c130*pow(c220,2)*c310)*
    4032+(-c202*pow(c211,2)*c220+c031*c040*c112*c301+c040*c103*c130*c211+c031*c112*
    c301*c400+c004*c103*c130*c211+c004*c013*c121*c310+c013*c121*c310*c400+pow(c220,2)*
    pow(c112,2)+pow(c022,2)*pow(c211,2)+pow(c202,2)*pow(c121,2)-c013*c031*c040*c202+c130*c202*c211*c301-
    c040*c103*c211*c310-c103*c202*c220*c301-c040*c130*c202*c310-c013*c040*c112*
    c301+c022*c031*c121*c310+c013*c121*c130*c220-c013*c112*c220*c301-c013*c031*
    pow(c301,2)-c103*c121*pow(c310,2)-pow(c013,2)*c121*c301-c013*c031*pow(c310,2)-c103*c121*pow(c211,2)-
    c112*c130*pow(c211,2)-c112*c130*pow(c301,2)-pow(c031,2)*c112*c310+c031*c103*c112*c202-c031*
    c103*c112*c400-c013*c121*c130*c400-c022*c130*c220*c310-c004*c013*c031*c220-
    c004*c031*c121*c310-c022*c103*c301*c400-c013*c121*c130*c202-c013*c022*c031*
    c202-c130*c202*c220*c310-c022*c130*c211*c301-c022*c103*c211*c310+c103*c211*
    c220*c310-c031*c103*c112*c220-c022*c130*c310*c400-c004*c130*c211*c301-c004*
    c103*c220*c301-c013*c022*c031*c220-c031*c121*c202*c310+c013*c022*c112*c301-
    c022*c103*c202*c301+pow(c202,2)*pow(c220,2)+pow(c022,2)*pow(c220,2)+pow(c022,2)*pow(c202,2)+c004*c220*pow(c112,2)
    +c022*c400*pow(c211,2)+c040*c202*pow(c121,2)-c004*c220*c112*c310-c004*c220*c130*c112-
    c004*c022*c112*c310-c004*c022*c130*c112-c220*c400*c211*c031-c220*c400*c211*
    c013-c004*c202*c112*c310-c004*c202*c130*c112-c022*c400*c211*c031-c022*c400*
    c211*c013-c022*c040*c121*c103-c022*c040*c121*c301-c202*c400*c211*c031-c202*
    c400*c211*c013-c040*c202*c121*c103-c040*c202*c121*c301-c220*c040*c121*c103-
    c220*c040*c121*c301-c013*pow(c121,2)*c211-c013*pow(c130,2)*c211-c031*pow(c112,2)*c211-pow(c103,2)*
    c130*c310-pow(c031,2)*c103*c301-pow(c112,2)*c121*c301-c112*pow(c121,2)*c310-c031*pow(c103,2)*c211-
    pow(c013,2)*c130*c310-c103*pow(c130,2)*c301-c022*pow(c121,2)*c220-c022*pow(c112,2)*c202-c040*c103*
    c112*c211-c031*c112*c121*c400-c040*c112*c211*c301-c013*c112*c121*c400-c004*
    c121*c211*c310-c004*c121*c130*c211)*8064+(-pow(c004,2)*pow(c400,2)-pow(c004,2)*pow(c040,2)-pow(c040,2)
    *pow(c400,2))*196+(-pow(c004,2)*pow(c121,2)-pow(c040,2)*pow(c211,2)-pow(c121,2)*pow(c400,2)-pow(c112,2)*pow(c400,2)-pow(c004,2)
    *pow(c211,2)-pow(c040,2)*pow(c112,2))*3024+(-pow(c040,2)*pow(c202,2)-pow(c022,2)*pow(c400,2)-pow(c004,2)*pow(c220,2))*168
    +(-pow(c202,2)*pow(c400,2)-pow(c004,2)*pow(c202,2)-pow(c004,2)*pow(c022,2)-pow(c022,2)*pow(c040,2)-pow(c040,2)*pow(c220,2)-pow(c220,2)*pow(c400,2))*840+(pow(c310,2)*pow(c400,2)+pow(c004,2)*pow(c013,2)+pow(c301,2)*pow(c400,2)+pow(c031,2)*pow(c040,2)+pow(c004,2)
    *pow(c103,2)+pow(c040,2)*pow(c130,2))*336+(-pow(c040,2)*pow(c301,2)-pow(c031,2)*pow(c400,2)-pow(c004,2)*pow(c310,2)-pow(c013,2)
    *pow(c400,2)-pow(c040,2)*pow(c103,2)-pow(c004,2)*pow(c130,2))*2800+(pow(c004,2)*c040*c400-pow(c040,2)*pow(c121,2)-
    pow(c004,2)*pow(c112,2)-pow(c211,2)*pow(c400,2)+c004*pow(c040,2)*c400+c004*c040*pow(c400,2))*1680+(pow(c022,2)*
    c202*c400+c040*pow(c103,2)*c400+c022*c040*pow(c202,2)+c004*c022*pow(c400,2)+c004*c022*c040*
    c202+c022*c040*c220*c400+c004*c022*c220*c040+c004*c202*c220*c400+c004*pow(c040,2)*
    c202+pow(c040,2)*c202*c400+pow(c022,2)*c220*c400+c004*c022*c202*c400+c004*c022*pow(c220,2)+
    pow(c004,2)*c040*c220+pow(c013,2)*c040*c400+c022*c040*pow(c400,2)+c004*c040*pow(c310,2)+c004*c040*
    pow(c301,2)+c004*pow(c031,2)*c400+c040*pow(c202,2)*c220+c040*c202*c220*c400+c004*pow(c130,2)*c400+
    pow(c004,2)*c220*c400+c004*c202*pow(c220,2))*2016+(-pow(c013,2)*pow(c040,2)-pow(c103,2)*pow(c400,2)-pow(c220,4)-
    pow(c022,4)-pow(c202,4)-pow(c004,2)*pow(c301,2)+c004*c400*pow(c202,2)+c040*c400*pow(c220,2)-pow(c130,2)*pow(c400,2)-
    pow(c040,2)*pow(c310,2)+c040*c004*pow(c022,2)-pow(c004,2)*pow(c031,2))*1008+(c013*c022*c031*c040+c004*
    c022*c103*c121+c004*c022*c130*c310+c004*c031*c103*c310+c121*c220*c301*c400+
    c013*c130*c301*c400+c004*c130*c202*c310+c013*c040*c130*c301+c004*pow(c103,2)*c202+
    c004*pow(c013,2)*c022+c220*pow(c310,2)*c400+c004*c013*c202*c211+c004*c013*c130*c301+c040
    *c103*c220*c301+c031*c040*c211*c220+c112*c202*c310*c400+c031*c103*c310*c400+
    c013*c031*c202*c400+c022*c040*c112*c130+c031*c040*c103*c310+c022*c040*c103*
    c301+c013*c031*c220*c400+c040*pow(c130,2)*c220+c202*pow(c301,2)*c400+c022*pow(c031,2)*c040-
    pow(c004,2)*c130*c310-c013*c031*pow(c400,2)-pow(c040,2)*c103*c301+c103*c202*c301*c400+c004*
    c013*c022*c031-c013*c103*c121*c211-c112*c121*c301*c310+c130*c220*c310*c400+
    c040*c130*c220*c310+c004*c103*c202*c301-c031*c112*c130*c211)*2688+(pow(c004,4)+
    pow(c040,4)+pow(c400,4))*42)
    return Invs

########################################################################################
#main function

def main():
    R = [[0 for x in range(3)] for x in range(3)] #2D array
    R[0][0] = 0.86261; R[0][1] = -0.24693; R[0][2] = 0.44144;
    R[1][0] = 0.43156; R[1][1] = 0.81448; R[1][2] = -0.38771;
    R[2][0] = -0.26381; R[2][1] = 0.52497; R[2][2] = 0.80916;
    
    rotT4_arr = []
    T4Inv_arr = []
    rotT4Inv_arr = []
    for T4 in ten:
        #rotated tensor-4
        rotT4 = RotateTensor4(T4, R) #Rotatetenser function is called
        rotT4_arr.append(rotT4) 
        
        T4Inv = GDT4General12(T4)
        T4Inv_arr.append(T4Inv)
        rotT4Inv = GDT4General12(rotT4)
        rotT4Inv_arr.append(rotT4Inv)
    
    rotT4 = np.asarray(rotT4_arr)
    T4Inv = np.asarray(T4Inv_arr)
    rotT4Inv = np.asarray(rotT4Inv_arr)
    
    #print(rotT4.shape, T4Inv.shape, rotT4Inv.shape)

    absDiff = np.abs(rotT4Inv - T4Inv)
    relDiff = absDiff / T4Inv

    df=pandas.DataFrame(T4Inv)

    #print df.shape 
            
# create the function for data transformations

def load_transform(file_path, l):

    x, options = nrrd.read(file_path)
    data = x.transpose()

    m =[
        0.28209479177387819515, 0.54627421529603970018, 0, 
        -0.31539156525252004526, 0, 0, 0.62583573544917614484, 0, 
        -0.47308734787878004013, 0, 0.31735664074561298342, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0.27313710764801985009, 0, 0, 0, 0, 0, 0, 
        -0.23654367393939002007, 0, 0.62583573544917614484,
        0, 0, -0.27313710764801979458, 0, 0, 0, 0, -0.44253269244498261159, 
        0, 0.50178490766796690625, 0, 0, 0, 0, 0,
        0.094031597257959328995, -2.6239092990136782376e-17, 0, 
        -0.10513052175084000583, 0, 0, -0.62583573544917614484, 0, 
        -1.1695830935687379082e-17, 0, 0.10578554691520429543, 0, 0, 0, 0,
        0, 0, 0, 0, -0.091045702549339968535, 0, 0, 0, 0, 0, 0, 
        0.16726163588932230208, 0, -0.44253269244498261159, 0,
        0.094031597257959398384, 0.091045702549339926901, 0, 
        0.052565260875419995978, 0, 0, 9.2621981986301462932e-18, 0, 
        0.47308734787878004013, 0, -0.42314218766081729273, 0, 0, 0, 0,
        -0, -0, -0, -0, -0, 0.27313710764801979458, -0, -0, 0, 0, 0, 0, 
        -0.23654367393939002007, 0, -0.62583573544917614484,
        0, 0, -0.091045702549339954657, 0, 0, 0, 0, 0.44253269244498261159, 
        0, 0.16726163588932227433, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0.091045702549339926901, 0, 0, 0, 0, 0, 0, 
        0.47308734787878004013, 0, 0,
        0, 0, -0.27313710764801979458, 0, 0, 0, 0, 0, 0, 
        -0.66904654355728920834, 0, 0, 0, 0, 0,
        0.28209479177387819515, -0.54627421529603958916, 0, 
        -0.31539156525252004526, 0, 0, 0.62583573544917614484, 0, 
        0.47308734787878004013, 0, 0.31735664074561298342, 0, 0, 0, 0,
        0, 0, 0, 0, -0.27313710764801979458, 0, 0, 0, 0, 0, 0, 
        0.50178490766796690625, 0, 0.44253269244498261159, 0,
        0.094031597257959370628, -0.091045702549339926901, 0, 
        0.052565260875420016795, 0, 0, 9.262198198630141671e-18, 0, 
        -0.47308734787878004013, 0, -0.42314218766081729273, 0, 0, 0, 0,
        -0, -0, -0, -0, -0.27313710764801979458, -0, -0, -0, 0, 0, 0, 
        -0.66904654355728920834, 0, 0, 0,
        0.28209479177387819515, 4.5022398477899912361e-18, -0, 
        0.63078313050504009052, -0, 0, 2.7789509525674121332e-17, -0, 
        2.3394324492700281759e-17, 0, 0.84628437532163458545, 0, 0, 0, 0
    ]

    m = np.array(m).reshape((15, 15))

    ten = np.dot(data, m)
    
    # add the label class
    
    labels = [l] * len(ten)
    
    return ten, labels

# read all datasets
X_train_1, y_train_1 = load_transform('one-train-odfs.nrrd', 0)
X_train_2, y_train_2 = load_transform('two-train-odfs.nrrd', 1)
X_train_3, y_train_3 = load_transform('three-train-odfs.nrrd', 2)
X_test_1, y_test_1 = load_transform('one-test-odfs.nrrd', 0)
X_test_2, y_test_2 = load_transform('two-test-odfs.nrrd', 1)
X_test_3, y_test_3 = load_transform('three-test-odfs.nrrd', 2)

# merge datasets
X_train_temp = np.append(X_train_1, X_train_2, axis=0)
X_train = np.append(X_train_temp, X_train_3, axis=0)

y_train_temp = np.append(y_train_1, y_train_2, axis=0)
y_train = np.append(y_train_temp, y_train_3, axis=0)

X_test_temp = np.append(X_test_1, X_test_2, axis=0)
X_test = np.append(X_test_temp, X_test_3, axis=0)

y_test_temp = np.append(y_test_1, y_test_2, axis=0)
y_test = np.append(y_test_temp, y_test_3, axis=0)


def RandomForest_cross_validation(X_train, y_train, X_test, y_test):
    print "--------------------------------------------------------"
    print "--------------------------------------------------------"    
    print "Random Forest Classifier"
    print "--------------------------------------------------------"
    print "Grid search"
    print "--------------------------------------------------------"
    print "--------------------------------------------------------"

    # grid search by the best parameters
    parameters = []
    acc_all = []
    best_acc = 0
    best_par = 0
    time_list_RF = []
    for n in [10, 100, 200, 500, 1000]: 
        timeStart = time.time()
        dlf = RandomForestClassifier(n_estimators=n, bootstrap=True, 
                            criterion="entropy", max_depth=None, max_features='auto',
                            max_leaf_nodes=None, min_samples_leaf=1,
                            min_samples_split=2,  n_jobs=1,
                            oob_score=False, random_state=0, verbose=0)
        dlf.fit(X_train, y_train)
        acc = dlf.score(X_test, y_test)
        
        print "Score = ", acc
        print "Number of trees =  ", n

                
        parameters.append(n)
        acc_all.append(acc)
                
        if acc > best_acc:
                    best_acc = acc
                    best_par = n
                    
        if len(acc_all) >=3:
            if acc < acc_all[-2] or acc == acc_all[-3]:
                break
                
        time_list_RF.append([n, acc, time.time() - timeStart])
                
    print "--------------------------------------------------------"
    print "--------------------------------------------------------"
    print dlf
    print "--------------------------------------------------------"
    print "--------------------------------------------------------"    
    
    #print "The best Accuracy is ", best_acc
    print "The best minimum number of trees is ", best_par
              
    time_train_predict = []  
         
    print "--------------------------------------------------------"
    print "--------------------------------------------------------"
    print "Training and Prediction"
    print "--------------------------------------------------------"
    print "--------------------------------------------------------"


    dlf = RandomForestClassifier(n_estimators=best_par, bootstrap=True, 
                            criterion="entropy", max_depth=None, max_features='auto',
                            max_leaf_nodes=None, min_samples_leaf=1,
                            min_samples_split=2,  n_jobs=1,
                            oob_score=False, random_state=0, verbose=0)

    #train
    timeStart_train = time.time()
    dlf.fit(X_train, y_train)
    train_score = dlf.score(X_test, y_test)
    time_train = time.time() - timeStart_train

    #Predict
    timeStart_test = time.time()
    pred = dlf.predict(X_test)
    test_score = dlf.score(X_test, y_test)
    time_test = time.time() - timeStart_test
        
    time_train_predict.append([n, time.time() - timeStart_train, train_score, time_test, test_score])      

    cm = confusion_matrix(y_test, pred)
    
    #print "Training score : ", train_score
    print "Training time :", time_train 
    print "--------------------------------------------------------"
    print "--------------------------------------------------------"    
    print "Test score : ", test_score
    print "Test time : ", time_test
    print "--------------------------------------------------------"
    print "--------------------------------------------------------"
    print "Confusion matrix : "
    print cm
    print "--------------------------------------------------------"
    print "--------------------------------------------------------"
    
    return time_list_RF, time_train_predict, cm 
    
    
def KNeighbors(X_train, y_train, X_test, y_test):
    print "--------------------------------------------------------"
    print "--------------------------------------------------------"
    print "kNN Classifier"
    print "--------------------------------------------------------"
    print "Grid search"
    print "--------------------------------------------------------"
    print "--------------------------------------------------------"

    # grid search by the best parameters
    parameters = []
    acc_all = []
    best_acc = 0
    best_par = 0
    time_list_KN = []
    for n in [5, 10, 20, 30, 50]:
        timeStart = time.time()
        dlf = KNeighborsClassifier(n_neighbors=n, leaf_size=30, p=2, metric='minkowski', metric_params=None)
        dlf.fit(X_train, y_train)
        acc_avg = dlf.score(X_test, y_test)

        print "Score = ", acc_avg
        print "Number of neighbors =  ", n



        parameters.append(n)
        acc_all.append(acc_avg)

        if acc_avg > best_acc:
                        best_acc = acc_avg
                        best_par = n

        if len(acc_all) >=3:
                if acc_avg < acc_all[-2] or acc_avg == acc_all[-3]:
                    break
        time_list_KN.append([n, acc_avg, time.time() - timeStart])
    
    
    print "--------------------------------------------------------"
    print "--------------------------------------------------------"
    print dlf
    print "--------------------------------------------------------"
    print "--------------------------------------------------------"    

    #print "The best Accuracy is ", best_acc
    print "The best minimum number of neighbors is ", best_par
    
    
    time_train_predict = []  
    
    
        
    print "--------------------------------------------------------"
    print "--------------------------------------------------------"
    print "Training and Prediction"
    print "--------------------------------------------------------"
    print "--------------------------------------------------------"


    dlf = KNeighborsClassifier(n_neighbors=best_par, leaf_size=30, p=2, metric='minkowski', metric_params=None)

    #train
    timeStart_train = time.time()
    dlf.fit(X_train, y_train)
    train_score = dlf.score(X_test, y_test)
    time_train = time.time() - timeStart_train

    #Predict
    timeStart_test = time.time()
    pred = dlf.predict(X_test)
    test_score = dlf.score(X_test, y_test)
    time_test = time.time() - timeStart_test
        
    time_train_predict.append([n, time.time() - timeStart_train, train_score, time_test, test_score])      

    cm = confusion_matrix(y_test, pred)
    
    #print "Training score : ", train_score
    print "Training time :", time_train 
    print "--------------------------------------------------------"
    print "--------------------------------------------------------"    
    print "Test score : ", test_score
    print "Test time : ", time_test
    print "--------------------------------------------------------"
    print "--------------------------------------------------------"
    print "Confusion matrix : "
    print cm
    print "--------------------------------------------------------"
    print "--------------------------------------------------------"
    
    return time_list_KN, time_train_predict, cm 
'''
def FCNN(X_train, y_train, X_test, y_test):
    
    training_one = []
    for i in xrange(len(X_train)):
        training_one.append(Instance(X_train[i], [y_train[i]]))

        
    print "--------------------------------------------------------"
    print "--------------------------------------------------------"
    print "Defining Neural Network"
    print "--------------------------------------------------------"
    print "--------------------------------------------------------"
    
    settings = {
        # Required settings
        "cost_function"         : sum_squared_error,
        "n_inputs"              : 15,       # Number of network input signals
        "layers"                : [ (3, tanh_function), (1, sigmoid_function) ],
                                            # [ (number_of_neurons, activation_function) ]
                                            # The last pair in you list describes the number of output signals

        # Optional settings
        "weights_low"           : -0.1,     # Lower bound on initial weight range
        "weights_high"          : 0.1,      # Upper bound on initial weight range
        "save_trained_network"  : False,    # Whether to write the trained weights to disk

        #"input_layer_dropout"   : 0.000000001,      # dropout fraction of the input layer
        #"hidden_layer_dropout"  : 0.0,      # dropout fraction in all hidden layers
    }


    # initialize the neural network
    network = NeuralNet( settings )

    # load a stored network configuration
    # network = NeuralNet.load_from_file( "trained_configuration.pkl" )

    # Train the network using SciPy
    scipyoptimize(
            network,
            training_one, 
            method = "Newton-CG",
            ERROR_LIMIT = 1e-2
        )
    print "--------------------------------------------------------"
    print "--------------------------------------------------------"
    print "Fully connected Neural Network building"
    print "--------------------------------------------------------"
    print "--------------------------------------------------------"
    
    

    network.print_test( training_one )
    
    
    print "--------------------------------------------------------"
    print "--------------------------------------------------------"

'''
time_list_RF, time_train_predict_RF, cm_RF = RandomForest_cross_validation(X_train, y_train, X_test, y_test)


time_list_KN, time_train_predict_KN, cm_KN = KNeighbors(X_train, y_train, X_test, y_test)


#FCNN(X_train, y_train, X_test, y_test)

#Saving the results in a excel file
'''
df_res = pandas.DataFrame()


df_res.loc["Training Time (sec)", "RF ({} trees)".format(time_train_predict_RF[0][0])] = time_train_predict_RF[0][1]
df_res.loc["Training Accuracy", "RF ({} trees)".format(time_train_predict_RF[0][0])] = time_train_predict_RF[0][2]
df_res.loc["Prediction Time (sec)", "RF ({} trees)".format(time_train_predict_RF[0][0])] = time_train_predict_RF[0][3]
df_res.loc["Prediction Accuracy", "RF ({} trees)".format(time_train_predict_RF[0][0])] = time_train_predict_RF[0][4]

df_res.loc["Confusion matrix", "RF ({} trees)".format(time_train_predict_RF[0][0])] = str(cm_RF)



df_res.loc["Training Time (sec)", "KN ({} neighbors)".format(time_train_predict_KN[0][0])] = time_train_predict_KN[0][1]
df_res.loc["Training Accuracy", "KN ({} neighbors)".format(time_train_predict_KN[0][0])] = time_train_predict_KN[0][2]
df_res.loc["Prediction Time (sec)", "KN ({} neighbors)".format(time_train_predict_KN[0][0])] = time_train_predict_KN[0][3]
df_res.loc["Prediction Accuracy", "KN ({} neighbors)".format(time_train_predict_KN[0][0])] = time_train_predict_KN[0][4]

df_res.loc["Confusion matrix", "KN ({} neighbors)".format(time_train_predict_KN[0][0])] = str(cm_KN)


df_res = df_res.fillna('')
df_res.to_excel("quartic_features_poly.xlsx")
df_res

'''



